{"version":3,"file":"static/js/vendor.three-stdlib.5e250383.js","mappings":"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","sources":["../node_modules/three-stdlib/node_modules/fflate/esm/browser.js","../node_modules/src/loaders/EXRLoader.js","../node_modules/src/loaders/RGBELoader.js","../node_modules/src/controls/EventDispatcher.ts","../node_modules/src/controls/OrbitControls.ts","../node_modules/src/objects/GroundProjectedEnv.ts","../node_modules/src/_polyfill/constants.ts"],"sourcesContent":["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], { type: 'text/javascript' }))));\n    w.onerror = function (e) { return cb(e.error, null); };\n    w.onmessage = function (e) { return cb(null, e.data); };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i)\n        ++l[cd[i] - 1];\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p / 8) | 0) + (p & 7 && 1); };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && !st.l && sl < 5))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            st.f = final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                throw 'invalid block type';\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n            if (!c)\n                throw 'invalid length/literal';\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    throw 'invalid distance';\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e < s) {\n                // write full block\n                pos = wfblk(w, pos, dat.subarray(i, e));\n            }\n            else {\n                // write final block\n                w[i] = lst;\n                pos = wfblk(w, pos, dat.subarray(i, s));\n            }\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (t)\n            throw 'stream finished';\n        if (!strm.ondata)\n            throw 'no stream handler';\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        throw 'invalid gzip data';\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        throw 'invalid zlib data';\n    if (d[1] & 32)\n        throw 'invalid zlib data: preset dictionaries not supported';\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                throw 'invalid gzip stream';\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                throw 'invalid zlib stream';\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no stream handler';\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k;\n        if (val instanceof u8)\n            t[n] = [val, o];\n        else if (Array.isArray(val))\n            t[n] = [val[0], mrg(o, val[1])];\n        else\n            fltn(val, n + '/', t, o);\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    throw 'invalid utf-8 data';\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            throw 'stream finished';\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                throw 'invalid utf-8 data';\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        if (this.d)\n            throw 'stream finished';\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            throw 'invalid utf-8 data';\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                throw 'extra field too long';\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        throw 'date not in range 1980-2099';\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback - add to ZIP archive before pushing';\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (this.d & 2)\n            throw 'stream finished';\n        var f = strToU8(file.filename), fl = f.length;\n        var com = file.comment, o = com && strToU8(com);\n        var u = fl != file.filename.length || (o && (com.length != o.length));\n        var hl = fl + exfl(file.extra) + 30;\n        if (fl > 65535)\n            throw 'filename too long';\n        var header = new u8(hl);\n        wzh(header, 0, file, f, u);\n        var chks = [header];\n        var pAll = function () {\n            for (var _i = 0, chks_1 = chks; _i < chks_1.length; _i++) {\n                var chk = chks_1[_i];\n                _this_1.ondata(null, chk, false);\n            }\n            chks = [];\n        };\n        var tr = this.d;\n        this.d = 0;\n        var ind = this.u.length;\n        var uf = mrg(file, {\n            f: f,\n            u: u,\n            o: o,\n            t: function () {\n                if (file.terminate)\n                    file.terminate();\n            },\n            r: function () {\n                pAll();\n                if (tr) {\n                    var nxt = _this_1.u[ind + 1];\n                    if (nxt)\n                        nxt.r();\n                    else\n                        _this_1.d = 1;\n                }\n                tr = 1;\n            }\n        });\n        var cl = 0;\n        file.ondata = function (err, dat, final) {\n            if (err) {\n                _this_1.ondata(err, dat, final);\n                _this_1.terminate();\n            }\n            else {\n                cl += dat.length;\n                chks.push(dat);\n                if (final) {\n                    var dd = new u8(16);\n                    wbytes(dd, 0, 0x8074B50);\n                    wbytes(dd, 4, file.crc);\n                    wbytes(dd, 8, cl);\n                    wbytes(dd, 12, file.size);\n                    chks.push(dd);\n                    uf.c = cl, uf.b = hl + cl + 16, uf.crc = file.crc, uf.size = file.size;\n                    if (tr)\n                        uf.r();\n                    tr = 1;\n                }\n                else if (tr)\n                    pAll();\n            }\n        };\n        this.u.push(uf);\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            if (this.d & 1)\n                throw 'stream finishing';\n            throw 'stream finished';\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cb(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cb(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl('filename too long', null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            throw 'filename too long';\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, data, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            throw 'no callback';\n        if (!this.p)\n            throw 'stream finished';\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_2 = [];\n                        this_1.k.unshift(chks_2);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    throw 'no callback';\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        throw 'unknown compression type ' + cmp_1;\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_3 = chks_2; _i < chks_3.length; _i++) {\n                                        var dat = chks_3[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_2 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                throw 'invalid zip file';\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\n/**\n * Asynchronously decompresses a ZIP archive\n * @param data The raw compressed ZIP file\n * @param cb The callback to call with the decompressed files\n * @returns A function that can be used to immediately terminate the unzipping\n */\nexport function unzip(data, cb) {\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cb('invalid zip file', null);\n            return;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (!lft)\n        cb(null, {});\n    var c = lft;\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50) {\n            cb('invalid zip file', null);\n            return;\n        }\n        c = lft = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var _loop_3 = function (i) {\n        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                files[fn] = d;\n                if (!--lft)\n                    cb(null, files);\n            }\n        };\n        if (!c_1)\n            cbl(null, slc(data, b, b + sc));\n        else if (c_1 == 8) {\n            var infl = data.subarray(b, b + sc);\n            if (sc < 320000) {\n                try {\n                    cbl(null, inflateSync(infl, new u8(su)));\n                }\n                catch (e) {\n                    cbl(e, null);\n                }\n            }\n            else\n                term.push(inflate(infl, { size: su }, cbl));\n        }\n        else\n            cbl('unknown compression type ' + c_1, null);\n    };\n    for (var i = 0; i < c; ++i) {\n        _loop_3(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @returns The decompressed files\n */\nexport function unzipSync(data) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            throw 'invalid zip file';\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            throw 'invalid zip file';\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!c_2)\n            files[fn] = slc(data, b, b + sc);\n        else if (c_2 == 8)\n            files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n        else\n            throw 'unknown compression type ' + c_2;\n    }\n    return files;\n}\n","import {\n  Texture,\n  DataTextureLoader,\n  DataUtils,\n  FloatType,\n  HalfFloatType,\n  LinearFilter,\n  RedFormat,\n  RGBAFormat,\n} from 'three'\nimport { unzlibSync } from 'fflate'\nimport { version } from '../_polyfill/constants'\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\n// https://github.com/mrdoob/three.js/pull/25771\nconst hasColorSpace = version >= 152\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager)\n\n    this.type = HalfFloatType\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16\n    const BITMAP_SIZE = USHORT_RANGE >> 3\n\n    const HUF_ENCBITS = 16 // literal (value) bit length\n    const HUF_DECBITS = 14 // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1 // encoding table size\n    const HUF_DECSIZE = 1 << HUF_DECBITS // decoding table size\n    const HUF_DECMASK = HUF_DECSIZE - 1\n\n    const NBITS = 16\n    const A_OFFSET = 1 << (NBITS - 1)\n    const MOD_MASK = (1 << NBITS) - 1\n\n    const SHORT_ZEROCODE_RUN = 59\n    const LONG_ZEROCODE_RUN = 63\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN\n\n    const ULONG_SIZE = 8\n    const FLOAT32_SIZE = 4\n    const INT32_SIZE = 4\n    const INT16_SIZE = 2\n    const INT8_SIZE = 1\n\n    const STATIC_HUFFMAN = 0\n    const DEFLATE = 1\n\n    const UNKNOWN = 0\n    const LOSSY_DCT = 1\n    const RLE = 2\n\n    const logBase = Math.pow(2.7182818, 2.2)\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0\n\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & (1 << (i & 7))) {\n          lut[k++] = i\n        }\n      }\n\n      var n = k - 1\n\n      while (k < USHORT_RANGE) lut[k++] = 0\n\n      return n\n    }\n\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {}\n        hdec[i].len = 0\n        hdec[i].lit = 0\n        hdec[i].p = null\n      }\n    }\n\n    const getBitsReturn = { l: 0, c: 0, lc: 0 }\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = (c << 8) | parseUint8Array(uInt8Array, inOffset)\n        lc += 8\n      }\n\n      lc -= nBits\n\n      getBitsReturn.l = (c >> lc) & ((1 << nBits) - 1)\n      getBitsReturn.c = c\n      getBitsReturn.lc = lc\n    }\n\n    const hufTableBuffer = new Array(59)\n\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1\n\n      var c = 0\n\n      for (var i = 58; i > 0; --i) {\n        var nc = (c + hufTableBuffer[i]) >> 1\n        hufTableBuffer[i] = c\n        c = nc\n      }\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i]\n        if (l > 0) hcode[i] = l | (hufTableBuffer[l]++ << 6)\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset\n      var c = 0\n      var lc = 0\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false\n\n        getBits(6, c, lc, uInt8Array, p)\n\n        var l = getBitsReturn.l\n        c = getBitsReturn.c\n        lc = getBitsReturn.lc\n\n        hcode[im] = l\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable'\n          }\n\n          getBits(8, c, lc, uInt8Array, p)\n\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN\n          c = getBitsReturn.c\n          lc = getBitsReturn.lc\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable'\n          }\n\n          while (zerun--) hcode[im++] = 0\n\n          im--\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable'\n          }\n\n          while (zerun--) hcode[im++] = 0\n\n          im--\n        }\n      }\n\n      hufCanonicalCodeTable(hcode)\n    }\n\n    function hufLength(code) {\n      return code & 63\n    }\n\n    function hufCode(code) {\n      return code >> 6\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im])\n        var l = hufLength(hcode[im])\n\n        if (c >> l) {\n          throw 'Invalid table entry'\n        }\n\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> (l - HUF_DECBITS)]\n\n          if (pl.len) {\n            throw 'Invalid table entry'\n          }\n\n          pl.lit++\n\n          if (pl.p) {\n            var p = pl.p\n            pl.p = new Array(pl.lit)\n\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i]\n            }\n          } else {\n            pl.p = new Array(1)\n          }\n\n          pl.p[pl.lit - 1] = im\n        } else if (l) {\n          var plOffset = 0\n\n          for (var i = 1 << (HUF_DECBITS - l); i > 0; i--) {\n            var pl = hdecod[(c << (HUF_DECBITS - l)) + plOffset]\n\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry'\n            }\n\n            pl.len = l\n            pl.lit = im\n\n            plOffset++\n          }\n        }\n      }\n\n      return true\n    }\n\n    const getCharReturn = { c: 0, lc: 0 }\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = (c << 8) | parseUint8Array(uInt8Array, inOffset)\n      lc += 8\n\n      getCharReturn.c = c\n      getCharReturn.lc = lc\n    }\n\n    const getCodeReturn = { c: 0, lc: 0 }\n\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset)\n          c = getCharReturn.c\n          lc = getCharReturn.lc\n        }\n\n        lc -= 8\n\n        var cs = c >> lc\n        var cs = new Uint8Array([cs])[0]\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false\n        }\n\n        var s = outBuffer[outBufferOffset.value - 1]\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po\n      } else {\n        return false\n      }\n\n      getCodeReturn.c = c\n      getCodeReturn.lc = lc\n    }\n\n    function UInt16(value) {\n      return value & 0xffff\n    }\n\n    function Int16(value) {\n      var ref = UInt16(value)\n      return ref > 0x7fff ? ref - 0x10000 : ref\n    }\n\n    const wdec14Return = { a: 0, b: 0 }\n\n    function wdec14(l, h) {\n      var ls = Int16(l)\n      var hs = Int16(h)\n\n      var hi = hs\n      var ai = ls + (hi & 1) + (hi >> 1)\n\n      var as = ai\n      var bs = ai - hi\n\n      wdec14Return.a = as\n      wdec14Return.b = bs\n    }\n\n    function wdec16(l, h) {\n      var m = UInt16(l)\n      var d = UInt16(h)\n\n      var bb = (m - (d >> 1)) & MOD_MASK\n      var aa = (d + bb - A_OFFSET) & MOD_MASK\n\n      wdec14Return.a = aa\n      wdec14Return.b = bb\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14\n      var n = nx > ny ? ny : nx\n      var p = 1\n      var p2\n\n      while (p <= n) p <<= 1\n\n      p >>= 1\n      p2 = p\n      p >>= 1\n\n      while (p >= 1) {\n        var py = 0\n        var ey = py + oy * (ny - p2)\n        var oy1 = oy * p\n        var oy2 = oy * p2\n        var ox1 = ox * p\n        var ox2 = ox * p2\n        var i00, i01, i10, i11\n\n        for (; py <= ey; py += oy2) {\n          var px = py\n          var ex = py + ox * (nx - p2)\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1\n            var p10 = px + oy1\n            var p11 = p10 + ox1\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j])\n\n              i00 = wdec14Return.a\n              i10 = wdec14Return.b\n\n              wdec14(buffer[p01 + j], buffer[p11 + j])\n\n              i01 = wdec14Return.a\n              i11 = wdec14Return.b\n\n              wdec14(i00, i01)\n\n              buffer[px + j] = wdec14Return.a\n              buffer[p01 + j] = wdec14Return.b\n\n              wdec14(i10, i11)\n\n              buffer[p10 + j] = wdec14Return.a\n              buffer[p11 + j] = wdec14Return.b\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j])\n\n              i00 = wdec14Return.a\n              i10 = wdec14Return.b\n\n              wdec16(buffer[p01 + j], buffer[p11 + j])\n\n              i01 = wdec14Return.a\n              i11 = wdec14Return.b\n\n              wdec16(i00, i01)\n\n              buffer[px + j] = wdec14Return.a\n              buffer[p01 + j] = wdec14Return.b\n\n              wdec16(i10, i11)\n\n              buffer[p10 + j] = wdec14Return.a\n              buffer[p11 + j] = wdec14Return.b\n            }\n          }\n\n          if (nx & p) {\n            var p10 = px + oy1\n\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j])\n            else wdec16(buffer[px + j], buffer[p10 + j])\n\n            i00 = wdec14Return.a\n            buffer[p10 + j] = wdec14Return.b\n\n            buffer[px + j] = i00\n          }\n        }\n\n        if (ny & p) {\n          var px = py\n          var ex = py + ox * (nx - p2)\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1\n\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j])\n            else wdec16(buffer[px + j], buffer[p01 + j])\n\n            i00 = wdec14Return.a\n            buffer[p01 + j] = wdec14Return.b\n\n            buffer[px + j] = i00\n          }\n        }\n\n        p2 = p\n        p >>= 1\n      }\n\n      return py\n    }\n\n    function hufDecode(\n      encodingTable,\n      decodingTable,\n      uInt8Array,\n      inDataView,\n      inOffset,\n      ni,\n      rlc,\n      no,\n      outBuffer,\n      outOffset,\n    ) {\n      var c = 0\n      var lc = 0\n      var outBufferEndOffset = no\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8)\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset)\n\n        c = getCharReturn.c\n        lc = getCharReturn.lc\n\n        while (lc >= HUF_DECBITS) {\n          var index = (c >> (lc - HUF_DECBITS)) & HUF_DECMASK\n          var pl = decodingTable[index]\n\n          if (pl.len) {\n            lc -= pl.len\n\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset)\n\n            c = getCodeReturn.c\n            lc = getCodeReturn.lc\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues'\n            }\n\n            var j\n\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]])\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset)\n\n                c = getCharReturn.c\n                lc = getCharReturn.lc\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == ((c >> (lc - l)) & ((1 << l) - 1))) {\n                  lc -= l\n\n                  getCode(\n                    pl.p[j],\n                    rlc,\n                    c,\n                    lc,\n                    uInt8Array,\n                    inDataView,\n                    inOffset,\n                    outBuffer,\n                    outOffset,\n                    outBufferEndOffset,\n                  )\n\n                  c = getCodeReturn.c\n                  lc = getCodeReturn.lc\n\n                  break\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw 'hufDecode issues'\n            }\n          }\n        }\n      }\n\n      var i = (8 - ni) & 7\n\n      c >>= i\n      lc -= i\n\n      while (lc > 0) {\n        var pl = decodingTable[(c << (HUF_DECBITS - lc)) & HUF_DECMASK]\n\n        if (pl.len) {\n          lc -= pl.len\n\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset)\n\n          c = getCodeReturn.c\n          lc = getCodeReturn.lc\n        } else {\n          throw 'hufDecode issues'\n        }\n      }\n\n      return true\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = { value: 0 }\n      var initialInOffset = inOffset.value\n\n      var im = parseUint32(inDataView, inOffset)\n      var iM = parseUint32(inDataView, inOffset)\n\n      inOffset.value += 4\n\n      var nBits = parseUint32(inDataView, inOffset)\n\n      inOffset.value += 4\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE'\n      }\n\n      var freq = new Array(HUF_ENCSIZE)\n      var hdec = new Array(HUF_DECSIZE)\n\n      hufClearDecTable(hdec)\n\n      var ni = nCompressed - (inOffset.value - initialInOffset)\n\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq)\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress'\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec)\n\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset)\n    }\n\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]]\n      }\n    }\n\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128\n        source[t] = d\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      var t1 = 0\n      var t2 = Math.floor((source.length + 1) / 2)\n      var s = 0\n      var stop = source.length - 1\n\n      while (true) {\n        if (s > stop) break\n        out[s++] = source[t1++]\n\n        if (s > stop) break\n        out[s++] = source[t2++]\n      }\n    }\n\n    function decodeRunLength(source) {\n      var size = source.byteLength\n      var out = new Array()\n      var p = 0\n\n      var reader = new DataView(source)\n\n      while (size > 0) {\n        var l = reader.getInt8(p++)\n\n        if (l < 0) {\n          var count = -l\n          size -= count + 1\n\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++))\n          }\n        } else {\n          var count = l\n          size -= 2\n\n          var value = reader.getUint8(p++)\n\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value)\n          }\n        }\n      }\n\n      return out\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer)\n\n      var width = channelData[cscSet.idx[0]].width\n      var height = channelData[cscSet.idx[0]].height\n\n      var numComp = 3\n\n      var numFullBlocksX = Math.floor(width / 8.0)\n      var numBlocksX = Math.ceil(width / 8.0)\n      var numBlocksY = Math.ceil(height / 8.0)\n      var leftoverX = width - (numBlocksX - 1) * 8\n      var leftoverY = height - (numBlocksY - 1) * 8\n\n      var currAcComp = { value: 0 }\n      var currDcComp = new Array(numComp)\n      var dctData = new Array(numComp)\n      var halfZigBlock = new Array(numComp)\n      var rowBlock = new Array(numComp)\n      var rowOffsets = new Array(numComp)\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]]\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY\n        dctData[comp] = new Float32Array(64)\n        halfZigBlock[comp] = new Uint16Array(64)\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64)\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8\n\n        if (blocky == numBlocksY - 1) maxY = leftoverY\n\n        var maxX = 8\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0)\n\n            // set block DC component\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]\n            // set block AC components\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp])\n\n            // UnZigZag block to float\n            unZigZag(halfZigBlock[comp], dctData[comp])\n            // decode float dct\n            dctInverse(dctData[comp])\n          }\n\n          if (numComp == 3) {\n            csc709Inverse(dctData)\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64)\n          }\n        } // blockx\n\n        let offset = 0\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y]\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8\n\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true)\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true)\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true)\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true)\n\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true)\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true)\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true)\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true)\n\n              offset += 8 * INT16_SIZE * type\n            }\n          }\n\n          // handle partial X blocks\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true)\n              }\n            }\n          }\n        } // comp\n      } // blocky\n\n      var halfRow = new Uint16Array(width)\n      var dataView = new DataView(outBuffer.buffer)\n\n      // convert channels back to float, if needed\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true\n        var type = channelData[cscSet.idx[comp]].type\n\n        if (channelData[comp].type != 2) continue\n\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y]\n\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true)\n          }\n\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true)\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue\n      var dctComp = 1\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value]\n\n        if (acValue == 0xff00) {\n          dctComp = 64\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff\n        } else {\n          halfZigBlock[dctComp] = acValue\n          dctComp++\n        }\n\n        currAcComp.value++\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0])\n      dst[1] = decodeFloat16(src[1])\n      dst[2] = decodeFloat16(src[5])\n      dst[3] = decodeFloat16(src[6])\n      dst[4] = decodeFloat16(src[14])\n      dst[5] = decodeFloat16(src[15])\n      dst[6] = decodeFloat16(src[27])\n      dst[7] = decodeFloat16(src[28])\n      dst[8] = decodeFloat16(src[2])\n      dst[9] = decodeFloat16(src[4])\n\n      dst[10] = decodeFloat16(src[7])\n      dst[11] = decodeFloat16(src[13])\n      dst[12] = decodeFloat16(src[16])\n      dst[13] = decodeFloat16(src[26])\n      dst[14] = decodeFloat16(src[29])\n      dst[15] = decodeFloat16(src[42])\n      dst[16] = decodeFloat16(src[3])\n      dst[17] = decodeFloat16(src[8])\n      dst[18] = decodeFloat16(src[12])\n      dst[19] = decodeFloat16(src[17])\n\n      dst[20] = decodeFloat16(src[25])\n      dst[21] = decodeFloat16(src[30])\n      dst[22] = decodeFloat16(src[41])\n      dst[23] = decodeFloat16(src[43])\n      dst[24] = decodeFloat16(src[9])\n      dst[25] = decodeFloat16(src[11])\n      dst[26] = decodeFloat16(src[18])\n      dst[27] = decodeFloat16(src[24])\n      dst[28] = decodeFloat16(src[31])\n      dst[29] = decodeFloat16(src[40])\n\n      dst[30] = decodeFloat16(src[44])\n      dst[31] = decodeFloat16(src[53])\n      dst[32] = decodeFloat16(src[10])\n      dst[33] = decodeFloat16(src[19])\n      dst[34] = decodeFloat16(src[23])\n      dst[35] = decodeFloat16(src[32])\n      dst[36] = decodeFloat16(src[39])\n      dst[37] = decodeFloat16(src[45])\n      dst[38] = decodeFloat16(src[52])\n      dst[39] = decodeFloat16(src[54])\n\n      dst[40] = decodeFloat16(src[20])\n      dst[41] = decodeFloat16(src[22])\n      dst[42] = decodeFloat16(src[33])\n      dst[43] = decodeFloat16(src[38])\n      dst[44] = decodeFloat16(src[46])\n      dst[45] = decodeFloat16(src[51])\n      dst[46] = decodeFloat16(src[55])\n      dst[47] = decodeFloat16(src[60])\n      dst[48] = decodeFloat16(src[21])\n      dst[49] = decodeFloat16(src[34])\n\n      dst[50] = decodeFloat16(src[37])\n      dst[51] = decodeFloat16(src[47])\n      dst[52] = decodeFloat16(src[50])\n      dst[53] = decodeFloat16(src[56])\n      dst[54] = decodeFloat16(src[59])\n      dst[55] = decodeFloat16(src[61])\n      dst[56] = decodeFloat16(src[35])\n      dst[57] = decodeFloat16(src[36])\n      dst[58] = decodeFloat16(src[48])\n      dst[59] = decodeFloat16(src[49])\n\n      dst[60] = decodeFloat16(src[57])\n      dst[61] = decodeFloat16(src[58])\n      dst[62] = decodeFloat16(src[62])\n      dst[63] = decodeFloat16(src[63])\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0)\n      const b = 0.5 * Math.cos(3.14159 / 16.0)\n      const c = 0.5 * Math.cos(3.14159 / 8.0)\n      const d = 0.5 * Math.cos((3.0 * 3.14159) / 16.0)\n      const e = 0.5 * Math.cos((5.0 * 3.14159) / 16.0)\n      const f = 0.5 * Math.cos((3.0 * 3.14159) / 8.0)\n      const g = 0.5 * Math.cos((7.0 * 3.14159) / 16.0)\n\n      var alpha = new Array(4)\n      var beta = new Array(4)\n      var theta = new Array(4)\n      var gamma = new Array(4)\n\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8\n\n        alpha[0] = c * data[rowPtr + 2]\n        alpha[1] = f * data[rowPtr + 2]\n        alpha[2] = c * data[rowPtr + 6]\n        alpha[3] = f * data[rowPtr + 6]\n\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7]\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7]\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7]\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7]\n\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4])\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4])\n        theta[1] = alpha[0] + alpha[3]\n        theta[2] = alpha[1] - alpha[2]\n\n        gamma[0] = theta[0] + theta[1]\n        gamma[1] = theta[3] + theta[2]\n        gamma[2] = theta[3] - theta[2]\n        gamma[3] = theta[0] - theta[1]\n\n        data[rowPtr + 0] = gamma[0] + beta[0]\n        data[rowPtr + 1] = gamma[1] + beta[1]\n        data[rowPtr + 2] = gamma[2] + beta[2]\n        data[rowPtr + 3] = gamma[3] + beta[3]\n\n        data[rowPtr + 4] = gamma[3] - beta[3]\n        data[rowPtr + 5] = gamma[2] - beta[2]\n        data[rowPtr + 6] = gamma[1] - beta[1]\n        data[rowPtr + 7] = gamma[0] - beta[0]\n      }\n\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column]\n        alpha[1] = f * data[16 + column]\n        alpha[2] = c * data[48 + column]\n        alpha[3] = f * data[48 + column]\n\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column]\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column]\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column]\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column]\n\n        theta[0] = a * (data[column] + data[32 + column])\n        theta[3] = a * (data[column] - data[32 + column])\n\n        theta[1] = alpha[0] + alpha[3]\n        theta[2] = alpha[1] - alpha[2]\n\n        gamma[0] = theta[0] + theta[1]\n        gamma[1] = theta[3] + theta[2]\n        gamma[2] = theta[3] - theta[2]\n        gamma[3] = theta[0] - theta[1]\n\n        data[0 + column] = gamma[0] + beta[0]\n        data[8 + column] = gamma[1] + beta[1]\n        data[16 + column] = gamma[2] + beta[2]\n        data[24 + column] = gamma[3] + beta[3]\n\n        data[32 + column] = gamma[3] - beta[3]\n        data[40 + column] = gamma[2] - beta[2]\n        data[48 + column] = gamma[1] - beta[1]\n        data[56 + column] = gamma[0] - beta[0]\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i]\n        var cb = data[1][i]\n        var cr = data[2][i]\n\n        data[0][i] = y + 1.5747 * cr\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr\n        data[2][i] = y + 1.8556 * cb\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]))\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2)\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0)\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size)\n    }\n\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size)\n\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed))\n      var tmpBuffer = new Uint8Array(rawBuffer.length)\n\n      predictor(rawBuffer) // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer) // interleave pixels\n\n      return new DataView(tmpBuffer.buffer)\n    }\n\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size)\n      var rawBuffer = unzlibSync(compressed)\n      var tmpBuffer = new Uint8Array(rawBuffer.length)\n\n      predictor(rawBuffer) // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer) // interleave pixels\n\n      return new DataView(tmpBuffer.buffer)\n    }\n\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer\n      var inOffset = { value: info.offset.value }\n\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type))\n      var bitmap = new Uint8Array(BITMAP_SIZE)\n\n      // Setup channel info\n      var outBufferEnd = 0\n      var pizChannelData = new Array(info.channels)\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {}\n        pizChannelData[i]['start'] = outBufferEnd\n        pizChannelData[i]['end'] = pizChannelData[i]['start']\n        pizChannelData[i]['nx'] = info.width\n        pizChannelData[i]['ny'] = info.lines\n        pizChannelData[i]['size'] = info.type\n\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size\n      }\n\n      // Read range compression data\n\n      var minNonZero = parseUint16(inDataView, inOffset)\n      var maxNonZero = parseUint16(inDataView, inOffset)\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE'\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset)\n        }\n      }\n\n      // Reverse LUT\n      var lut = new Uint16Array(USHORT_RANGE)\n      var maxValue = reverseLutFromBitmap(bitmap, lut)\n\n      var length = parseUint32(inDataView, inOffset)\n\n      // Huffman decoding\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd)\n\n      // Wavelet decoding\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i]\n\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue)\n        }\n      }\n\n      // Expand the pixel data to their original range\n      applyLut(lut, outBuffer, outBufferEnd)\n\n      // Rearrange the pixel data into the format expected by the caller.\n      var tmpOffset = 0\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength)\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c]\n\n          var n = cd.nx * cd.size\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE)\n\n          tmpBuffer.set(cp, tmpOffset)\n          tmpOffset += n * INT16_SIZE\n          cd.end += n\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer)\n    }\n\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size)\n      var rawBuffer = unzlibSync(compressed)\n\n      const sz = info.lines * info.channels * info.width\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz)\n\n      let tmpBufferEnd = 0\n      let writePtr = 0\n      const ptr = new Array(4)\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd\n              ptr[1] = ptr[0] + info.width\n              tmpBufferEnd = ptr[1] + info.width\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = (rawBuffer[ptr[0]++] << 8) | rawBuffer[ptr[1]++]\n\n                pixel += diff\n\n                tmpBuffer[writePtr] = pixel\n                writePtr++\n              }\n\n              break\n\n            case 2:\n              ptr[0] = tmpBufferEnd\n              ptr[1] = ptr[0] + info.width\n              ptr[2] = ptr[1] + info.width\n              tmpBufferEnd = ptr[2] + info.width\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = (rawBuffer[ptr[0]++] << 24) | (rawBuffer[ptr[1]++] << 16) | (rawBuffer[ptr[2]++] << 8)\n\n                pixel += diff\n\n                tmpBuffer[writePtr] = pixel\n                writePtr++\n              }\n\n              break\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer)\n    }\n\n    function uncompressDWA(info) {\n      var inDataView = info.viewer\n      var inOffset = { value: info.offset.value }\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE))\n\n      // Read compression header information\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset),\n      }\n\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported'\n      }\n\n      // Read channel ruleset information\n      var channelRules = new Array()\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE\n\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset)\n        var value = parseUint8(inDataView, inOffset)\n        var compression = (value >> 2) & 3\n        var csc = (value >> 4) - 1\n        var index = new Int8Array([csc])[0]\n        var type = parseUint8(inDataView, inOffset)\n\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression,\n        })\n\n        ruleSize -= name.length + 3\n      }\n\n      // Classify channels\n      var channels = EXRHeader.channels\n      var channelData = new Array(info.channels)\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = (channelData[i] = {})\n        var channel = channels[i]\n\n        cd.name = channel.name\n        cd.compression = UNKNOWN\n        cd.decoded = false\n        cd.type = channel.pixelType\n        cd.pLinear = channel.pLinear\n        cd.width = info.width\n        cd.height = info.lines\n      }\n\n      var cscSet = {\n        idx: new Array(3),\n      }\n\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset]\n\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i]\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset\n            }\n\n            cd.offset = offset\n          }\n        }\n      }\n\n      // Read DCT - AC component data\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount)\n            hufUncompress(\n              info.array,\n              inDataView,\n              inOffset,\n              dwaHeader.acCompressedSize,\n              acBuffer,\n              dwaHeader.totalAcUncompressedCount,\n            )\n            break\n\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount)\n            var data = unzlibSync(compressed)\n            var acBuffer = new Uint16Array(data.buffer)\n            inOffset.value += dwaHeader.totalAcUncompressedCount\n            break\n        }\n      }\n\n      // Read DCT - DC component data\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize,\n        }\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer)\n        inOffset.value += dwaHeader.dcCompressedSize\n      }\n\n      // Read RLE compressed data\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize)\n        var data = unzlibSync(compressed)\n        var rleBuffer = decodeRunLength(data.buffer)\n\n        inOffset.value += dwaHeader.rleCompressedSize\n      }\n\n      // Prepare outbuffer data offset\n      var outBufferEnd = 0\n      var rowOffsets = new Array(channelData.length)\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array()\n      }\n\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd)\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE\n        }\n      }\n\n      // Lossy DCT decode RGB channels\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer)\n\n      // Decode other channels\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i]\n\n        if (cd.decoded) continue\n\n        switch (cd.compression) {\n          case RLE:\n            var row = 0\n            var rleOffset = 0\n\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row]\n\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height]\n                }\n\n                rleOffset++\n              }\n\n              row++\n            }\n\n            break\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression'\n        }\n      }\n\n      return new DataView(outBuffer.buffer)\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer)\n      var endOffset = 0\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1\n      }\n\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset))\n\n      offset.value = offset.value + endOffset + 1\n\n      return stringValue\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size))\n\n      offset.value = offset.value + size\n\n      return stringValue\n    }\n\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset)\n      var y = parseUint32(dataView, offset)\n\n      return [x, y]\n    }\n\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset)\n      var y = parseUint32(dataView, offset)\n\n      return [x, y]\n    }\n\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true)\n\n      offset.value = offset.value + INT32_SIZE\n\n      return Int32\n    }\n\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true)\n\n      offset.value = offset.value + INT32_SIZE\n\n      return Uint32\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value]\n\n      offset.value = offset.value + INT8_SIZE\n\n      return Uint8\n    }\n\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value)\n\n      offset.value = offset.value + INT8_SIZE\n\n      return Uint8\n    }\n\n    const parseInt64 = function (dataView, offset) {\n      let int\n\n      if ('getBigInt64' in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true))\n      } else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32)\n      }\n\n      offset.value += ULONG_SIZE\n\n      return int\n    }\n\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true)\n\n      offset.value += FLOAT32_SIZE\n\n      return float\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset))\n    }\n\n    // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n        fraction = binary & 0x03ff\n\n      return (\n        (binary >> 15 ? -1 : 1) *\n        (exponent\n          ? exponent === 0x1f\n            ? fraction\n              ? NaN\n              : Infinity\n            : Math.pow(2, exponent - 15) * (1 + fraction / 0x400)\n          : 6.103515625e-5 * (fraction / 0x400))\n      )\n    }\n\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true)\n\n      offset.value += INT16_SIZE\n\n      return Uint16\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset))\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value\n      var channels = []\n\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset)\n        var pixelType = parseInt32(dataView, offset)\n        var pLinear = parseUint8(dataView, offset)\n        offset.value += 3 // reserved, three chars\n        var xSampling = parseInt32(dataView, offset)\n        var ySampling = parseInt32(dataView, offset)\n\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling,\n        })\n      }\n\n      offset.value += 1\n\n      return channels\n    }\n\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset)\n      var redY = parseFloat32(dataView, offset)\n      var greenX = parseFloat32(dataView, offset)\n      var greenY = parseFloat32(dataView, offset)\n      var blueX = parseFloat32(dataView, offset)\n      var blueY = parseFloat32(dataView, offset)\n      var whiteX = parseFloat32(dataView, offset)\n      var whiteY = parseFloat32(dataView, offset)\n\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY,\n      }\n    }\n\n    function parseCompression(dataView, offset) {\n      var compressionCodes = [\n        'NO_COMPRESSION',\n        'RLE_COMPRESSION',\n        'ZIPS_COMPRESSION',\n        'ZIP_COMPRESSION',\n        'PIZ_COMPRESSION',\n        'PXR24_COMPRESSION',\n        'B44_COMPRESSION',\n        'B44A_COMPRESSION',\n        'DWAA_COMPRESSION',\n        'DWAB_COMPRESSION',\n      ]\n\n      var compression = parseUint8(dataView, offset)\n\n      return compressionCodes[compression]\n    }\n\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset)\n      var yMin = parseUint32(dataView, offset)\n      var xMax = parseUint32(dataView, offset)\n      var yMax = parseUint32(dataView, offset)\n\n      return { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax }\n    }\n\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y']\n\n      var lineOrder = parseUint8(dataView, offset)\n\n      return lineOrders[lineOrder]\n    }\n\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset)\n      var y = parseFloat32(dataView, offset)\n\n      return [x, y]\n    }\n\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset)\n      var y = parseFloat32(dataView, offset)\n      var z = parseFloat32(dataView, offset)\n\n      return [x, y, z]\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size)\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size)\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset)\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset)\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset)\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset)\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset)\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset)\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset)\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset)\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset)\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset)\n      } else if (type === 'preview') {\n        offset.value += size\n        return 'skipped'\n      } else {\n        offset.value += size\n        return undefined\n      }\n    }\n\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {}\n\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\"\n      }\n\n      EXRHeader.version = dataView.getUint8(4)\n\n      const spec = dataView.getUint8(5) // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16),\n      }\n\n      // start of header\n\n      offset.value = 8 // start at 8 - after pre-amble\n\n      var keepReading = true\n\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset)\n\n        if (attributeName == 0) {\n          keepReading = false\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset)\n          var attributeSize = parseUint32(dataView, offset)\n          var attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize)\n\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`)\n          } else {\n            EXRHeader[attributeName] = attributeValue\n          }\n        }\n      }\n\n      if ((spec & ~0x04) != 0) {\n        // unsupported tiled, deep-image, multi-part\n        console.error('EXRHeader:', EXRHeader)\n        throw 'THREE.EXRLoader: provided file is currently unsupported.'\n      }\n\n      return EXRHeader\n    }\n\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        [hasColorSpace ? 'colorSpace' : 'encoding']: null,\n      }\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1\n          EXRDecoder.uncompress = uncompressRAW\n          break\n\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1\n          EXRDecoder.uncompress = uncompressRLE\n          break\n\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1\n          EXRDecoder.uncompress = uncompressZIP\n          break\n\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16\n          EXRDecoder.uncompress = uncompressZIP\n          break\n\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32\n          EXRDecoder.uncompress = uncompressPIZ\n          break\n\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16\n          EXRDecoder.uncompress = uncompressPXR\n          break\n\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32\n          EXRDecoder.uncompress = uncompressDWA\n          break\n\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256\n          EXRDecoder.uncompress = uncompressDWA\n          break\n\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported'\n      }\n\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines\n\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16\n            EXRDecoder.inputSize = INT16_SIZE\n            break\n\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16\n            EXRDecoder.inputSize = INT16_SIZE\n            break\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32\n            EXRDecoder.inputSize = FLOAT32_SIZE\n            break\n\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32\n            EXRDecoder.inputSize = FLOAT32_SIZE\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.'\n      }\n\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize\n\n      for (var i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset) // scanlineOffset\n\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels\n\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size)\n\n          // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size)\n\n          break\n\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size)\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3c00, 0, size) // Uint16Array holds half float data, 0x3C00 is 1\n\n          break\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType)\n          break\n      }\n\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels\n\n      if (EXRDecoder.outputChannels == 4) EXRDecoder.format = RGBAFormat\n      else EXRDecoder.format = RedFormat\n\n      if (hasColorSpace) EXRDecoder.colorSpace = 'srgb-linear'\n      else EXRDecoder.encoding = 3000 // LinearEncoding\n\n      return EXRDecoder\n    }\n\n    // start parsing file [START]\n\n    const bufferDataView = new DataView(buffer)\n    const uInt8Array = new Uint8Array(buffer)\n    const offset = { value: 0 }\n\n    // get header information and validate format.\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset)\n\n    // get input compression information and prepare decoding.\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type)\n\n    const tmpOffset = { value: 0 }\n    const channelOffsets = { R: 0, G: 1, B: 2, A: 3, Y: 0 }\n\n    for (\n      let scanlineBlockIdx = 0;\n      scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize;\n      scanlineBlockIdx++\n    ) {\n      const line = parseUint32(bufferDataView, offset) // line_no\n      EXRDecoder.size = parseUint32(bufferDataView, offset) // data_len\n      EXRDecoder.lines =\n        line + EXRDecoder.scanlineBlockSize > EXRDecoder.height\n          ? EXRDecoder.height - line\n          : EXRDecoder.scanlineBlockSize\n\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder)\n\n      offset.value += EXRDecoder.size\n\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize\n        if (true_y >= EXRDecoder.height) break\n\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name]\n\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value =\n              (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) *\n              EXRDecoder.inputSize\n            const outIndex =\n              (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) +\n              x * EXRDecoder.outputChannels +\n              cOff\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset)\n          }\n        }\n      }\n    }\n\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      [hasColorSpace ? 'colorSpace' : 'encoding']: EXRDecoder[hasColorSpace ? 'colorSpace' : 'encoding'],\n      type: this.type,\n    }\n  }\n\n  setDataType(value) {\n    this.type = value\n    return this\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      if (hasColorSpace) texture.colorSpace = texData.colorSpace\n      else texture.encoding = texData.encoding\n      texture.minFilter = LinearFilter\n      texture.magFilter = LinearFilter\n      texture.generateMipmaps = false\n      texture.flipY = false\n\n      if (onLoad) onLoad(texture, texData)\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError)\n  }\n}\n\nexport { EXRLoader }\n","import { DataTextureLoader, DataUtils, FloatType, HalfFloatType, LinearFilter } from 'three'\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager)\n\n    this.type = HalfFloatType\n  }\n\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n  parse(buffer) {\n    const /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            throw new Error('THREE.RGBELoader: Read Error: ' + (msg || ''))\n          case rgbe_write_error:\n            throw new Error('THREE.RGBELoader: Write Error: ' + (msg || ''))\n          case rgbe_format_error:\n            throw new Error('THREE.RGBELoader: Bad File Format: ' + (msg || ''))\n          default:\n          case rgbe_memory_error:\n            throw new Error('THREE.RGBELoader: Memory Error: ' + (msg || ''))\n        }\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = '\\n',\n      fgets = function (buffer, lineLimit, consume) {\n        const chunkSize = 128\n\n        lineLimit = !lineLimit ? 1024 : lineLimit\n        let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)))\n\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk\n          len += chunk.length\n          p += chunkSize\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)))\n        }\n\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n          if (false !== consume) buffer.pos += len + i + 1\n          return s + chunk.slice(0, i)\n        }\n\n        return false\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function (buffer) {\n        // regexes to parse header info fields\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0 /* indicate which fields are valid */,\n\n            string: '' /* the actual header string */,\n\n            comments: '' /* comments found in header */,\n\n            programtype: 'RGBE' /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n            format: '' /* RGBE format, default 32-bit_rle_rgbe */,\n\n            gamma: 1.0 /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n            exposure: 1.0 /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n            width: 0,\n            height: 0 /* image dimensions, width/height */,\n          }\n\n        let line, match\n\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          rgbe_error(rgbe_read_error, 'no header found')\n        }\n\n        /* if you want to require the magic token then uncomment the next line */\n        if (!(match = line.match(magic_token_re))) {\n          rgbe_error(rgbe_format_error, 'bad initial token')\n        }\n\n        header.valid |= RGBE_VALID_PROGRAMTYPE\n        header.programtype = match[1]\n        header.string += line + '\\n'\n\n        while (true) {\n          line = fgets(buffer)\n          if (false === line) break\n          header.string += line + '\\n'\n\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n'\n            continue // comment line\n          }\n\n          if ((match = line.match(gamma_re))) {\n            header.gamma = parseFloat(match[1])\n          }\n\n          if ((match = line.match(exposure_re))) {\n            header.exposure = parseFloat(match[1])\n          }\n\n          if ((match = line.match(format_re))) {\n            header.valid |= RGBE_VALID_FORMAT\n            header.format = match[1] //'32-bit_rle_rgbe';\n          }\n\n          if ((match = line.match(dimensions_re))) {\n            header.valid |= RGBE_VALID_DIMENSIONS\n            header.height = parseInt(match[1], 10)\n            header.width = parseInt(match[2], 10)\n          }\n\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break\n        }\n\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          rgbe_error(rgbe_format_error, 'missing format specifier')\n        }\n\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          rgbe_error(rgbe_format_error, 'missing image size specifier')\n        }\n\n        return header\n      },\n      RGBE_ReadPixels_RLE = function (buffer, w, h) {\n        const scanline_width = w\n\n        if (\n          // run length encoding is not allowed so read flat\n          scanline_width < 8 ||\n          scanline_width > 0x7fff ||\n          // this file is not run length encoded\n          2 !== buffer[0] ||\n          2 !== buffer[1] ||\n          buffer[2] & 0x80\n        ) {\n          // return the flat buffer\n          return new Uint8Array(buffer)\n        }\n\n        if (scanline_width !== ((buffer[2] << 8) | buffer[3])) {\n          rgbe_error(rgbe_format_error, 'wrong scanline width')\n        }\n\n        const data_rgba = new Uint8Array(4 * w * h)\n\n        if (!data_rgba.length) {\n          rgbe_error(rgbe_memory_error, 'unable to allocate buffer space')\n        }\n\n        let offset = 0,\n          pos = 0\n\n        const ptr_end = 4 * scanline_width\n        const rgbeStart = new Uint8Array(4)\n        const scanline_buffer = new Uint8Array(ptr_end)\n        let num_scanlines = h\n\n        // read in each successive scanline\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            rgbe_error(rgbe_read_error)\n          }\n\n          rgbeStart[0] = buffer[pos++]\n          rgbeStart[1] = buffer[pos++]\n          rgbeStart[2] = buffer[pos++]\n          rgbeStart[3] = buffer[pos++]\n\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || ((rgbeStart[2] << 8) | rgbeStart[3]) != scanline_width) {\n            rgbe_error(rgbe_format_error, 'bad rgbe scanline format')\n          }\n\n          // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n          let ptr = 0,\n            count\n\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++]\n            const isEncodedRun = count > 128\n            if (isEncodedRun) count -= 128\n\n            if (0 === count || ptr + count > ptr_end) {\n              rgbe_error(rgbe_format_error, 'bad scanline data')\n            }\n\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              const byteValue = buffer[pos++]\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue\n              }\n              //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr)\n              ptr += count\n              pos += count\n            }\n          }\n\n          // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n          const l = scanline_width //scanline_buffer.byteLength;\n          for (let i = 0; i < l; i++) {\n            let off = 0\n            data_rgba[offset] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 1] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 2] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 3] = scanline_buffer[i + off]\n            offset += 4\n          }\n\n          num_scanlines--\n        }\n\n        return data_rgba\n      }\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3]\n      const scale = Math.pow(2.0, e - 128.0) / 255.0\n\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale\n      destArray[destOffset + 3] = 1\n    }\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3]\n      const scale = Math.pow(2.0, e - 128.0) / 255.0\n\n      // clamping to 65504, the maximum representable value in float16\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504))\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504))\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504))\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1)\n    }\n\n    const byteArray = new Uint8Array(buffer)\n    byteArray.pos = 0\n    const rgbe_header_info = RGBE_ReadHeader(byteArray)\n\n    const w = rgbe_header_info.width,\n      h = rgbe_header_info.height,\n      image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h)\n\n    let data, type\n    let numElements\n\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4\n        const floatArray = new Float32Array(numElements * 4)\n\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4)\n        }\n\n        data = floatArray\n        type = FloatType\n        break\n\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4\n        const halfArray = new Uint16Array(numElements * 4)\n\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4)\n        }\n\n        data = halfArray\n        type = HalfFloatType\n        break\n\n      default:\n        throw new Error('THREE.RGBELoader: Unsupported type: ' + this.type)\n        break\n    }\n\n    return {\n      width: w,\n      height: h,\n      data: data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type: type,\n    }\n  }\n\n  setDataType(value) {\n    this.type = value\n    return this\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if ('colorSpace' in texture) texture.colorSpace = 'srgb-linear'\n          else texture.encoding = 3000 // LinearEncoding\n          texture.minFilter = LinearFilter\n          texture.magFilter = LinearFilter\n          texture.generateMipmaps = false\n          texture.flipY = true\n\n          break\n      }\n\n      if (onLoad) onLoad(texture, texData)\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError)\n  }\n}\n\nexport { RGBELoader }\n","/*\nDue to @types/three r168 breaking change\nwe have to manually copy the EventDispatcher class from three.js.\nSo this files merges the declarations from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/three/src/core/EventDispatcher.d.ts\nwith the implementation from https://github.com/mrdoob/three.js/blob/dev/src/core/EventDispatcher.js\nMore info in https://github.com/pmndrs/three-stdlib/issues/387\n*/\n\n/**\n * The minimal basic Event that can be dispatched by a {@link EventDispatcher<>}.\n */\nexport interface BaseEvent<TEventType extends string = string> {\n    readonly type: TEventType;\n    // not defined in @types/three\n    target: any;\n}\n\n/**\n * The minimal expected contract of a fired Event that was dispatched by a {@link EventDispatcher<>}.\n */\nexport interface Event<TEventType extends string = string, TTarget = unknown> {\n    readonly type: TEventType;\n    readonly target: TTarget;\n}\n\nexport type EventListener<TEventData, TEventType extends string, TTarget> = (\n    event: TEventData & Event<TEventType, TTarget>,\n) => void;\n\nexport class EventDispatcher<TEventMap extends {} = {}> {\n    // not defined in @types/three\n    private _listeners: any;\n\n    /**\n     * Adds a listener to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n\taddEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\t/**\n     * Checks if listener is added to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n    hasEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): boolean {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\t/**\n     * Removes a listener from an event type.\n     * @param type The type of the listener that gets removed.\n     * @param listener The listener function that gets removed.\n     */\n    removeEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n     * Fire an event type.\n     * @param event The event that gets fired.\n     */\n    dispatchEvent<T extends Extract<keyof TEventMap, string>>(event: BaseEvent<T> & TEventMap[T]): void {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}","import {\n  Matrix4,\n  MOUSE,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Ray,\n  Plane,\n} from 'three'\nimport { EventDispatcher } from './EventDispatcher'\nimport { StandardControlsEventMap } from './StandardControlsEventMap'\n\nconst _ray = /* @__PURE__ */ new Ray()\nconst _plane = /* @__PURE__ */ new Plane()\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180))\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst moduloWrapAround = (offset: number, capacity: number) => ((offset % capacity) + capacity) % capacity\n\nclass OrbitControls extends EventDispatcher<StandardControlsEventMap> {\n  object: PerspectiveCamera | OrthographicCamera\n  domElement: HTMLElement | undefined\n  // Set to false to disable this control\n  enabled = true\n  // \"target\" sets the location of focus, where the object orbits around\n  target = new Vector3()\n  // How far you can dolly in and out ( PerspectiveCamera only )\n  minDistance = 0\n  maxDistance = Infinity\n  // How far you can zoom in and out ( OrthographicCamera only )\n  minZoom = 0\n  maxZoom = Infinity\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  minPolarAngle = 0 // radians\n  maxPolarAngle = Math.PI // radians\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n  minAzimuthAngle = -Infinity // radians\n  maxAzimuthAngle = Infinity // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n  enableDamping = false\n  dampingFactor = 0.05\n  // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n  // Set to false to disable zooming\n  enableZoom = true\n  zoomSpeed = 1.0\n  // Set to false to disable rotating\n  enableRotate = true\n  rotateSpeed = 1.0\n  // Set to false to disable panning\n  enablePan = true\n  panSpeed = 1.0\n  screenSpacePanning = true // if false, pan orthogonal to world-space direction camera.up\n  keyPanSpeed = 7.0 // pixels moved per arrow key push\n  zoomToCursor = false\n  // Set to true to automatically rotate around the target\n  // If auto-rotate is enabled, you must call controls.update() in your animation loop\n  autoRotate = false\n  autoRotateSpeed = 2.0 // 30 seconds per orbit when fps is 60\n  reverseOrbit = false // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n  reverseHorizontalOrbit = false // true if you want to reverse the horizontal orbit direction\n  reverseVerticalOrbit = false // true if you want to reverse the vertical orbit direction\n  // The four arrow keys\n  keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }\n  // Mouse buttons\n  mouseButtons: Partial<{\n    LEFT: MOUSE\n    MIDDLE: MOUSE\n    RIGHT: MOUSE\n  }> = {\n    LEFT: MOUSE.ROTATE,\n    MIDDLE: MOUSE.DOLLY,\n    RIGHT: MOUSE.PAN,\n  }\n  // Touch fingers\n  touches: Partial<{\n    ONE: TOUCH\n    TWO: TOUCH\n  }> = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }\n  target0: Vector3\n  position0: Vector3\n  zoom0: number\n  // the target DOM element for key events\n  _domElementKeyEvents: any = null\n\n  getPolarAngle: () => number\n  getAzimuthalAngle: () => number\n  setPolarAngle: (x: number) => void\n  setAzimuthalAngle: (x: number) => void\n  getDistance: () => number\n  // Not used in most scenarios, however they can be useful for specific use cases\n  getZoomScale: () => number\n\n  listenToKeyEvents: (domElement: HTMLElement) => void\n  stopListenToKeyEvents: () => void\n  saveState: () => void\n  reset: () => void\n  update: () => void\n  connect: (domElement: HTMLElement) => void\n  dispose: () => void\n\n  // Dolly in programmatically\n  dollyIn: (dollyScale?: number) => void\n  // Dolly out programmatically\n  dollyOut: (dollyScale?: number) => void\n  // Get the current scale\n  getScale: () => number\n  // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n  setScale: (newScale: number) => void\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super()\n\n    this.object = object\n    this.domElement = domElement\n\n    // for reset\n    this.target0 = this.target.clone()\n    this.position0 = this.object.position.clone()\n    this.zoom0 = this.object.zoom\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = (): number => spherical.phi\n\n    this.getAzimuthalAngle = (): number => spherical.theta\n\n    this.setPolarAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let phi = moduloWrapAround(value, 2 * Math.PI)\n      let currentPhi = spherical.phi\n\n      // convert to the equivalent shortest angle\n      if (currentPhi < 0) currentPhi += 2 * Math.PI\n      if (phi < 0) phi += 2 * Math.PI\n      let phiDist = Math.abs(phi - currentPhi)\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI\n        } else {\n          currentPhi += 2 * Math.PI\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi\n      scope.update()\n    }\n\n    this.setAzimuthalAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let theta = moduloWrapAround(value, 2 * Math.PI)\n      let currentTheta = spherical.theta\n\n      // convert to the equivalent shortest angle\n      if (currentTheta < 0) currentTheta += 2 * Math.PI\n      if (theta < 0) theta += 2 * Math.PI\n      let thetaDist = Math.abs(theta - currentTheta)\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI\n        } else {\n          currentTheta += 2 * Math.PI\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta\n      scope.update()\n    }\n\n    this.getDistance = (): number => scope.object.position.distanceTo(scope.target)\n\n    this.listenToKeyEvents = (domElement: HTMLElement): void => {\n      domElement.addEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = domElement\n    }\n\n    this.stopListenToKeyEvents = (): void => {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = null\n    }\n\n    this.saveState = (): void => {\n      scope.target0.copy(scope.target)\n      scope.position0.copy(scope.object.position)\n      scope.zoom0 = scope.object.zoom\n    }\n\n    this.reset = (): void => {\n      scope.target.copy(scope.target0)\n      scope.object.position.copy(scope.position0)\n      scope.object.zoom = scope.zoom0\n      scope.object.updateProjectionMatrix()\n\n      // @ts-ignore\n      scope.dispatchEvent(changeEvent)\n\n      scope.update()\n\n      state = STATE.NONE\n    }\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = ((): (() => void) => {\n      const offset = new Vector3()\n      const up = new Vector3(0, 1, 0)\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(object.up, up)\n      const quatInverse = quat.clone().invert()\n\n      const lastPosition = new Vector3()\n      const lastQuaternion = new Quaternion()\n\n      const twoPI = 2 * Math.PI\n\n      return function update(): boolean {\n        const position = scope.object.position\n\n        // update new up direction\n        quat.setFromUnitVectors(object.up, up)\n        quatInverse.copy(quat).invert()\n\n        offset.copy(position).sub(scope.target)\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat)\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset)\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle())\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor\n        } else {\n          spherical.theta += sphericalDelta.theta\n          spherical.phi += sphericalDelta.phi\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle\n        let max = scope.maxAzimuthAngle\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI\n          else if (min > Math.PI) min -= twoPI\n\n          if (max < -Math.PI) max += twoPI\n          else if (max > Math.PI) max -= twoPI\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta))\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta)\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))\n        spherical.makeSafe()\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor)\n        } else {\n          scope.target.add(panOffset)\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if ((scope.zoomToCursor && performCursorZoom) || (scope.object as OrthographicCamera).isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius)\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale)\n        }\n\n        offset.setFromSpherical(spherical)\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse)\n\n        position.copy(scope.target).add(offset)\n\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix()\n        scope.object.lookAt(scope.target)\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor\n          sphericalDelta.phi *= 1 - scope.dampingFactor\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor)\n        } else {\n          sphericalDelta.set(0, 0, 0)\n\n          panOffset.set(0, 0, 0)\n        }\n\n        // adjust camera position\n        let zoomChanged = false\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length()\n            newRadius = clampDistance(prevRadius * scale)\n\n            const radiusDelta = prevRadius - newRadius\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta)\n            scope.object.updateMatrixWorld()\n          } else if ((scope.object as OrthographicCamera).isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0)\n            mouseBefore.unproject(scope.object)\n\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n            zoomChanged = true\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0)\n            mouseAfter.unproject(scope.object)\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore)\n            scope.object.updateMatrixWorld()\n\n            newRadius = offset.length()\n          } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.')\n            scope.zoomToCursor = false\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position)\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position)\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix)\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target)\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target)\n                _ray.intersectPlane(_plane, scope.target)\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1\n\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n          }\n        }\n\n        scale = 1\n        performCursorZoom = false\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\n        ) {\n          // @ts-ignore\n          scope.dispatchEvent(changeEvent)\n\n          lastPosition.copy(scope.object.position)\n          lastQuaternion.copy(scope.object.quaternion)\n          zoomChanged = false\n\n          return true\n        }\n\n        return false\n      }\n    })()\n\n    // https://github.com/mrdoob/three.js/issues/20575\n    this.connect = (domElement: HTMLElement): void => {\n      scope.domElement = domElement\n      // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n      scope.domElement.style.touchAction = 'none'\n      scope.domElement.addEventListener('contextmenu', onContextMenu)\n      scope.domElement.addEventListener('pointerdown', onPointerDown)\n      scope.domElement.addEventListener('pointercancel', onPointerUp)\n      scope.domElement.addEventListener('wheel', onMouseWheel)\n    }\n\n    this.dispose = (): void => {\n      // Enabling touch scroll\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = 'auto'\n      }\n      scope.domElement?.removeEventListener('contextmenu', onContextMenu)\n      scope.domElement?.removeEventListener('pointerdown', onPointerDown)\n      scope.domElement?.removeEventListener('pointercancel', onPointerUp)\n      scope.domElement?.removeEventListener('wheel', onMouseWheel)\n      scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n      scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      }\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }\n\n    //\n    // internals\n    //\n\n    const scope = this\n\n    const changeEvent = { type: 'change' }\n    const startEvent = { type: 'start' }\n    const endEvent = { type: 'end' }\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    }\n\n    let state = STATE.NONE\n\n    const EPS = 0.000001\n\n    // current position in spherical coordinates\n    const spherical = new Spherical()\n    const sphericalDelta = new Spherical()\n\n    let scale = 1\n    const panOffset = new Vector3()\n\n    const rotateStart = new Vector2()\n    const rotateEnd = new Vector2()\n    const rotateDelta = new Vector2()\n\n    const panStart = new Vector2()\n    const panEnd = new Vector2()\n    const panDelta = new Vector2()\n\n    const dollyStart = new Vector2()\n    const dollyEnd = new Vector2()\n    const dollyDelta = new Vector2()\n\n    const dollyDirection = new Vector3()\n    const mouse = new Vector2()\n    let performCursorZoom = false\n\n    const pointers: PointerEvent[] = []\n    const pointerPositions: { [key: string]: Vector2 } = {}\n\n    function getAutoRotationAngle(): number {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed\n    }\n\n    function getZoomScale(): number {\n      return Math.pow(0.95, scope.zoomSpeed)\n    }\n\n    function rotateLeft(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle\n      } else {\n        sphericalDelta.theta -= angle\n      }\n    }\n\n    function rotateUp(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle\n      } else {\n        sphericalDelta.phi -= angle\n      }\n    }\n\n    const panLeft = (() => {\n      const v = new Vector3()\n\n      return function panLeft(distance: number, objectMatrix: Matrix4) {\n        v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n        v.multiplyScalar(-distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    const panUp = (() => {\n      const v = new Vector3()\n\n      return function panUp(distance: number, objectMatrix: Matrix4) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1)\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0)\n          v.crossVectors(scope.object.up, v)\n        }\n\n        v.multiplyScalar(distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (() => {\n      const offset = new Vector3()\n\n      return function pan(deltaX: number, deltaY: number) {\n        const element = scope.domElement\n\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position\n          offset.copy(position).sub(scope.target)\n          let targetDistance = offset.length()\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0)\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix)\n          panUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix)\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth,\n            scope.object.matrix,\n          )\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight,\n            scope.object.matrix,\n          )\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')\n          scope.enablePan = false\n        }\n      }\n    })()\n\n    function setScale(newScale: number) {\n      if (\n        (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) ||\n        (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera)\n      ) {\n        scale = newScale\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n        scope.enableZoom = false\n      }\n    }\n\n    function dollyOut(dollyScale: number) {\n      setScale(scale / dollyScale)\n    }\n\n    function dollyIn(dollyScale: number) {\n      setScale(scale * dollyScale)\n    }\n\n    function updateMouseParameters(event: MouseEvent): void {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return\n      }\n\n      performCursorZoom = true\n\n      const rect = scope.domElement.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const y = event.clientY - rect.top\n      const w = rect.width\n      const h = rect.height\n\n      mouse.x = (x / w) * 2 - 1\n      mouse.y = -(y / h) * 2 + 1\n\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize()\n    }\n\n    function clampDistance(dist: number): number {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist))\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event: MouseEvent) {\n      rotateStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownDolly(event: MouseEvent) {\n      updateMouseParameters(event)\n      dollyStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownPan(event: MouseEvent) {\n      panStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseMoveRotate(event: MouseEvent) {\n      rotateEnd.set(event.clientX, event.clientY)\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n      scope.update()\n    }\n\n    function handleMouseMoveDolly(event: MouseEvent) {\n      dollyEnd.set(event.clientX, event.clientY)\n      dollyDelta.subVectors(dollyEnd, dollyStart)\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale())\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale())\n      }\n\n      dollyStart.copy(dollyEnd)\n      scope.update()\n    }\n\n    function handleMouseMovePan(event: MouseEvent) {\n      panEnd.set(event.clientX, event.clientY)\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n      scope.update()\n    }\n\n    function handleMouseWheel(event: WheelEvent) {\n      updateMouseParameters(event)\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale())\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale())\n      }\n\n      scope.update()\n    }\n\n    function handleKeyDown(event: KeyboardEvent) {\n      let needsUpdate = false\n\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault()\n        scope.update()\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        rotateStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        panStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX\n      const dy = pointers[0].pageY - pointers[1].pageY\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyStart.set(0, distance)\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enablePan) handleTouchStartPan()\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enableRotate) handleTouchStartRotate()\n    }\n\n    function handleTouchMoveRotate(event: PointerEvent) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        rotateEnd.set(x, y)\n      }\n\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n    }\n\n    function handleTouchMovePan(event: PointerEvent) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        panEnd.set(x, y)\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n    }\n\n    function handleTouchMoveDolly(event: PointerEvent) {\n      const position = getSecondPointerPosition(event)\n      const dx = event.pageX - position.x\n      const dy = event.pageY - position.y\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyEnd.set(0, distance)\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed))\n      dollyOut(dollyDelta.y)\n      dollyStart.copy(dollyEnd)\n    }\n\n    function handleTouchMoveDollyPan(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enablePan) handleTouchMovePan(event)\n    }\n\n    function handleTouchMoveDollyRotate(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enableRotate) handleTouchMoveRotate(event)\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (pointers.length === 0) {\n        scope.domElement?.ownerDocument.addEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.addEventListener('pointerup', onPointerUp)\n      }\n\n      addPointer(event)\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event)\n      } else {\n        onMouseDown(event)\n      }\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event)\n      } else {\n        onMouseMove(event)\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      removePointer(event)\n\n      if (pointers.length === 0) {\n        scope.domElement?.releasePointerCapture(event.pointerId)\n\n        scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      }\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n\n      state = STATE.NONE\n    }\n\n    function onMouseDown(event: MouseEvent) {\n      let mouseAction\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT\n          break\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE\n          break\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT\n          break\n\n        default:\n          mouseAction = -1\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseDownDolly(event)\n          state = STATE.DOLLY\n          break\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          } else {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          }\n          break\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          } else {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          }\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onMouseMove(event: MouseEvent) {\n      if (scope.enabled === false) return\n\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return\n          handleMouseMoveRotate(event)\n          break\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseMoveDolly(event)\n          break\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return\n          handleMouseMovePan(event)\n          break\n      }\n    }\n\n    function onMouseWheel(event: WheelEvent) {\n      if (scope.enabled === false || scope.enableZoom === false || (state !== STATE.NONE && state !== STATE.ROTATE)) {\n        return\n      }\n\n      event.preventDefault()\n\n      // @ts-ignore\n      scope.dispatchEvent(startEvent)\n\n      handleMouseWheel(event)\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n      if (scope.enabled === false || scope.enablePan === false) return\n      handleKeyDown(event)\n    }\n\n    function onTouchStart(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return\n              handleTouchStartRotate()\n              state = STATE.TOUCH_ROTATE\n              break\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return\n              handleTouchStartPan()\n              state = STATE.TOUCH_PAN\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return\n              handleTouchStartDollyPan()\n              state = STATE.TOUCH_DOLLY_PAN\n              break\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return\n              handleTouchStartDollyRotate()\n              state = STATE.TOUCH_DOLLY_ROTATE\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onTouchMove(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return\n          handleTouchMoveRotate(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return\n          handleTouchMovePan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return\n          handleTouchMoveDollyPan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return\n          handleTouchMoveDollyRotate(event)\n          scope.update()\n          break\n\n        default:\n          state = STATE.NONE\n      }\n    }\n\n    function onContextMenu(event: Event) {\n      if (scope.enabled === false) return\n      event.preventDefault()\n    }\n\n    function addPointer(event: PointerEvent) {\n      pointers.push(event)\n    }\n\n    function removePointer(event: PointerEvent) {\n      delete pointerPositions[event.pointerId]\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1)\n          return\n        }\n      }\n    }\n\n    function trackPointer(event: PointerEvent) {\n      let position = pointerPositions[event.pointerId]\n\n      if (position === undefined) {\n        position = new Vector2()\n        pointerPositions[event.pointerId] = position\n      }\n\n      position.set(event.pageX, event.pageY)\n    }\n\n    function getSecondPointerPosition(event: PointerEvent) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0]\n      return pointerPositions[pointer.pointerId]\n    }\n\n    // Add dolly in/out methods for public API\n\n    this.dollyIn = (dollyScale = getZoomScale()) => {\n      dollyIn(dollyScale)\n      scope.update()\n    }\n\n    this.dollyOut = (dollyScale = getZoomScale()) => {\n      dollyOut(dollyScale)\n      scope.update()\n    }\n\n    this.getScale = () => {\n      return scale\n    }\n\n    this.setScale = (newScale) => {\n      setScale(newScale)\n      scope.update()\n    }\n\n    this.getZoomScale = () => {\n      return getZoomScale()\n    }\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n    // force an update at start\n    this.update()\n  }\n}\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super(object, domElement)\n\n    this.screenSpacePanning = false // pan orthogonal to world-space direction camera.up\n\n    this.mouseButtons.LEFT = MOUSE.PAN\n    this.mouseButtons.RIGHT = MOUSE.ROTATE\n\n    this.touches.ONE = TOUCH.PAN\n    this.touches.TWO = TOUCH.DOLLY_ROTATE\n  }\n}\n\nexport { OrbitControls, MapControls }\n","import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide, Texture, CubeTexture, BufferGeometry } from 'three'\nimport { version } from '../_polyfill/constants'\n\nexport interface GroundProjectedEnvParameters {\n  height?: number\n  radius?: number\n}\n\nconst isCubeTexture = (def: CubeTexture | Texture): def is CubeTexture => def && (def as CubeTexture).isCubeTexture\n\nexport class GroundProjectedEnv extends Mesh<BufferGeometry, ShaderMaterial> {\n  constructor(texture: CubeTexture | Texture, options?: GroundProjectedEnvParameters) {\n    const isCubeMap = isCubeTexture(texture)\n    const w = (isCubeMap ? texture.image[0]?.width : texture.image.width) ?? 1024\n    const cubeSize = w / 4\n    const _lodMax = Math.floor(Math.log2(cubeSize))\n    const _cubeSize = Math.pow(2, _lodMax)\n    const width = 3 * Math.max(_cubeSize, 16 * 7)\n    const height = 4 * _cubeSize\n\n    const defines = [\n      isCubeMap ? '#define ENVMAP_TYPE_CUBE' : '',\n      `#define CUBEUV_TEXEL_WIDTH ${1.0 / width}`,\n      `#define CUBEUV_TEXEL_HEIGHT ${1.0 / height}`,\n      `#define CUBEUV_MAX_MIP ${_lodMax}.0`,\n    ]\n\n    const vertexShader = /* glsl */ `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `\n    const fragmentShader =\n      defines.join('\\n') +\n      /* glsl */ `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n        }\n        `\n\n    const uniforms = {\n      map: { value: texture },\n      height: { value: options?.height || 15 },\n      radius: { value: options?.radius || 100 },\n    }\n\n    const geometry = new IcosahedronGeometry(1, 16)\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide,\n    })\n\n    super(geometry, material)\n  }\n\n  set radius(radius: number) {\n    this.material.uniforms.radius.value = radius\n  }\n\n  get radius(): number {\n    return this.material.uniforms.radius.value\n  }\n\n  set height(height: number) {\n    this.material.uniforms.height.value = height\n  }\n\n  get height(): number {\n    return this.material.uniforms.height.value\n  }\n}\n","import { REVISION } from 'three'\n\nexport const version = /* @__PURE__ */ (() => parseInt(REVISION.replace(/\\D+/g, '')))()\n"],"names":["u8","Uint8Array","u16","Uint16Array","u32","Uint32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","s","length","l","co","le","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","n","set","subarray","inflt","dat","buf","st","sl","noBuf","noSt","cbuf","bl","nbuf","Math","final","f","pos","bt","lm","dm","lbt","dbt","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","lms","dms","lpos","sym","add","dsym","end","et","zlv","unzlibSync","data","out","td","TextDecoder","decode","stream","hasColorSpace","version","EXRLoader","DataTextureLoader","constructor","manager","super","this","HalfFloatType","parse","buffer","USHORT_RANGE","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","logBase","pow","getBitsReturn","lc","getBits","nBits","uInt8Array2","inOffset","parseUint8Array","hufTableBuffer","Array","hufUnpackEncTable","inDataView","ni","im","iM","hcode","value","zerun","nc","hufCanonicalCodeTable","hufLength","code","hufCode","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","UInt16","Int16","ref","wdec14Return","wdec14","h","ls","hs","ai","as","bs","wdec16","bb","aa","wav2Decode","buffer2","nx","ox","ny","oy","mx","p2","w14","i00","i01","i10","i11","py","ey","oy1","oy2","ox1","ox2","px","ex","p01","p11","p10","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","hdec","len","lit","hufClearDecTable","hdecod","pl","plOffset","hufBuildDecTable","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","hufDecode","predictor","source","interleaveScalar","t1","t2","floor","stop","decodeRunLength","size","byteLength","reader","DataView","getInt8","count","push","getUint8","unRleAC","currAcComp","acBuffer","halfZigBlock","acValue","dctComp","unZigZag","src","dst","decodeFloat16","dctInverse","cos","g","alpha","beta","theta","gamma","row","rowPtr","column","csc709Inverse","y","cb","cr","convertToHalf","idx","DataUtils","toHalfFloat","toLinear","float","sign","abs","uncompressRAW","info","array","offset","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","uncompressPIZ","width","scanlineBlockSize","channels","bitmap","outBufferEnd","pizChannelData","lines","minNonZero","parseUint16","maxNonZero","parseUint8","lut","maxValue","k","reverseLutFromBitmap","nData","applyLut","tmpOffset2","cp","uncompressPXR","sz","tmpBufferEnd","writePtr","ptr","pixel","uncompressDWA","dwaHeader","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","EXRHeader","compression","channelRules","ruleSize","name","parseNullTerminatedString","index","Int8Array","channelData","channel","decoded","pixelType","pLinear","height","cscSet","offset2","rule","zlibInfo","dcBuffer","rleBuffer","rowOffsets","chan","rowPtrs","dataView","numFullBlocksX","numBlocksX","ceil","numBlocksY","leftoverX","leftoverY","currDcComp","dctData","rowBlock","comp2","Float32Array","blocky","maxY","maxX","blockx","fill","type2","y2","setUint16","offset3","x2","halfRow","comp","getUint16","setFloat32","lossyDctDecode","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","parseInt32","Int32","getInt32","Uint32","getUint32","Uint8","int","prototype","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","exponent","fraction","NaN","Infinity","Uint16","parseFloat16","parseValue","parseFixedLengthString","startOffset","xSampling","ySampling","parseChlist","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseChromaticities","parseCompression","xMin","yMin","xMax","yMax","parseBox2i","parseLineOrder","parseV2f","parseV3f","parseRational","parseTimecode","bufferDataView","uInt8Array","EXRHeader2","spec","singleTile","longName","deepFormat","multiPart","keepReading","attributeName","attributeType","attributeValue","console","warn","error","parseHeader","EXRDecoder","outputType","EXRDecoder2","dataWindow","bytesPerLine","inputSize","uncompress","getter","format","FloatType","blockCount","outputChannels","byteArray","RGBAFormat","RedFormat","colorSpace","encoding","setupDecoder","tmpOffset","channelOffsets","R","G","B","A","Y","scanlineBlockIdx","line","line_y","true_y","channelID","cOff","outIndex","header","setDataType","load","url","onLoad","onProgress","onError","texture","texData","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","RGBELoader","rgbe_error","rgbe_error_code","msg","Error","fgets","lineLimit","consume","chunk","String","fromCharCode","apply","indexOf","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","scale","RGBEByteToRGBHalf","min","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","valid","string","comments","programtype","exposure","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","image_rgba_data","w2","h2","scanline_width","data_rgba","ptr_end","rgbeStart","scanline_buffer","num_scanlines","isEncodedRun","byteValue","off","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","EventDispatcher","__publicField","addEventListener","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","target","call","_ray","Ray","_plane","Plane","TILT_LIMIT","PI","moduloWrapAround","capacity","OrbitControls","object","domElement","Vector3","LEFT","UP","RIGHT","BOTTOM","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","setPolarAngle","currentPhi","phiDist","sphericalDelta","scope","update","setAzimuthalAngle","currentTheta","thetaDist","getDistance","distanceTo","listenToKeyEvents","domElement2","onKeyDown","_domElementKeyEvents","stopListenToKeyEvents","saveState","copy","reset","updateProjectionMatrix","changeEvent","state","STATE","NONE","up","quat","Quaternion","setFromUnitVectors","quatInverse","invert","lastPosition","lastQuaternion","twoPI","sub","applyQuaternion","setFromVector3","autoRotate","rotateLeft","autoRotateSpeed","enableDamping","dampingFactor","minAzimuthAngle","maxAzimuthAngle","isFinite","minPolarAngle","maxPolarAngle","makeSafe","addScaledVector","panOffset","zoomToCursor","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","matrixAutoUpdate","updateMatrix","lookAt","multiplyScalar","zoomChanged","newRadius","PerspectiveCamera","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","minZoom","maxZoom","mouseAfter","screenSpacePanning","transformDirection","matrix","origin","direction","dot","setFromNormalAndCoplanarPoint","intersectPlane","OrthographicCamera","distanceToSquared","EPS","quaternion","connect","style","touchAction","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","dispose","_c","_d","_e","ownerDocument","onPointerMove","_f","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","zoomSpeed","angle","reverseOrbit","reverseHorizontalOrbit","rotateUp","reverseVerticalOrbit","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","enablePan","setScale","newScale","enableZoom","dollyOut","dollyScale","dollyIn","updateMouseParameters","rect","getBoundingClientRect","clientX","clientY","normalize","dist","minDistance","maxDistance","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","rotateSpeed","handleTouchMovePan","panSpeed","handleTouchMoveDolly","enabled","addPointer","pointerType","trackPointer","touches","enableRotate","DOLLY_ROTATE","onTouchStart","mouseAction","button","mouseButtons","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","pointerId","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","keys","keyPanSpeed","handleKeyDown","pointer","arguments","undefined","getScale","GroundProjectedEnv","Mesh","options","isCubeMap","def","isCubeTexture","cubeSize","image","_lodMax","log2","_cubeSize","fragmentShader","join","uniforms","map","IcosahedronGeometry","ShaderMaterial","vertexShader","side","DoubleSide","material","REVISION","replace"],"sourceRoot":""}