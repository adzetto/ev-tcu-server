{"version":3,"file":"static/js/main.ba1e3284.5982ebcf.js","mappings":"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","sources":["utils/MobileMenuFix.js","utils/ModelOptimizer.js","utils/MenuVisibilityController.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/jsonp chunk loading","../webpack/startup"],"sourcesContent":["/**\n * Mobile Menu Compatibility Fix\n * This utility helps ensure that the mobile menu works correctly across all devices\n */\n\n// Force body scrolling to be enabled\nexport const forceEnableScrolling = () => {\n  document.body.style.overflow = '';\n  document.body.style.overflowY = 'auto';\n  document.body.style.position = 'static';\n  document.documentElement.style.overflow = '';\n  document.documentElement.style.overflowY = 'auto';\n  \n  // Remove any inline styles that might be blocking scrolling\n  const htmlStyles = document.documentElement.getAttribute('style') || '';\n  const bodyStyles = document.body.getAttribute('style') || '';\n  \n  if (htmlStyles.includes('overflow') || htmlStyles.includes('position')) {\n    document.documentElement.style.removeProperty('overflow');\n    document.documentElement.style.removeProperty('overflow-y');\n    document.documentElement.style.removeProperty('position');\n  }\n  \n  if (bodyStyles.includes('overflow') || bodyStyles.includes('position')) {\n    document.body.style.removeProperty('overflow');\n    document.body.style.removeProperty('overflow-y');\n    document.body.style.removeProperty('position');\n  }\n};\n\n// Function to be called when the mobile menu opens\nexport const fixMobileMenuOnOpen = () => {\n  const panel = document.querySelector('.mobile-menu-panel');\n  const backdrop = document.querySelector('.mobile-menu-backdrop');\n  const menuContent = document.querySelector('.mobile-menu-panel .menu-content');\n  \n  if (panel) {\n    // Force panel visibility and position\n    panel.style.display = 'flex';\n    panel.style.visibility = 'visible';\n    panel.style.opacity = '1';\n    panel.style.transform = 'translateX(0)';\n    \n    // Disable scrolling on the body when menu is open\n    document.body.style.overflow = 'hidden';\n    \n    // Fix for iOS height issues\n    if (/iPhone|iPad|iPod/.test(navigator.userAgent)) {\n      panel.style.height = `${window.innerHeight}px`;\n    }\n  }\n  \n  // Force menu content visibility\n  if (menuContent) {\n    menuContent.style.display = 'flex';\n    menuContent.style.visibility = 'visible';\n    menuContent.style.opacity = '1';\n    \n    // Force all child elements to be visible\n    const allMenuItems = menuContent.querySelectorAll('*');\n    allMenuItems.forEach(el => {\n      el.style.visibility = 'visible';\n      el.style.opacity = '1';\n      if (el.tagName !== 'SVG' && el.tagName !== 'path') {\n        if (el.classList.contains('menu-item')) {\n          el.style.display = 'flex';\n        } else if (el.tagName === 'SPAN') {\n          el.style.display = 'inline';\n        } else {\n          el.style.display = 'block';\n        }\n      }\n    });\n  }\n  \n  if (backdrop) {\n    backdrop.style.display = 'block';\n    backdrop.style.opacity = '1';\n  }\n  \n  // Force all menu items to be visible\n  const menuItems = document.querySelectorAll('.menu-item');\n  menuItems.forEach(item => {\n    item.style.visibility = 'visible';\n    item.style.opacity = '1';\n    item.style.display = 'flex';\n  });\n  \n  // Call additional enhancement functions\n  enhanceSubmenuButtons();\n  enhanceMenuContent();\n  \n  console.log('Mobile menu fix applied - menu opened');\n};\n\n// Enhance all technical submenu buttons\nexport const enhanceSubmenuButtons = () => {\n  // Target specific submenu buttons in the technical section\n  const buttons = document.querySelectorAll('.mobile-submenu button');\n  \n  buttons.forEach(button => {\n    // Force visibility and styling\n    button.style.display = 'block';\n    button.style.width = '100%';\n    button.style.textAlign = 'left';\n    button.style.padding = '0.5rem 0.75rem';\n    button.style.fontSize = '0.875rem';\n    button.style.visibility = 'visible';\n    button.style.opacity = '1';\n    button.style.pointerEvents = 'auto';\n    button.style.zIndex = '10005';\n    button.style.color = '#334155';\n    button.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';\n    button.style.borderRadius = '0.375rem';\n    button.style.marginBottom = '0.5rem';\n    \n    // Make sure all spans inside buttons are visible and properly colored\n    const spans = button.querySelectorAll('span');\n    spans.forEach(span => {\n      span.style.visibility = 'visible';\n      span.style.opacity = '1';\n      span.style.color = '#334155';\n      span.style.display = 'inline';\n    });\n    \n    // Add a red hover effect\n    button.addEventListener('mouseover', () => {\n      button.style.backgroundColor = 'rgba(255, 66, 84, 0.1)';\n      button.style.color = '#FF4254';\n    });\n    \n    button.addEventListener('mouseout', () => {\n      button.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';\n      button.style.color = '#334155';\n    });\n  });\n};\n\n// Function to fix technical submenu content\nexport const enhanceMenuContent = () => {\n  // Force better styling for menu content\n  const menuItem = document.querySelector('.mobile-menu-panel .menu-content');\n  if (menuItem) {\n    // Add !important styles with direct DOM manipulation\n    const style = document.createElement('style');\n    style.textContent = `\n      .mobile-menu-panel, \n      .mobile-menu-panel .menu-content,\n      .mobile-menu-panel .menu-item,\n      .mobile-menu-panel .mobile-submenu,\n      .mobile-menu-panel button,\n      .mobile-menu-panel a,\n      .mobile-menu-panel div,\n      .mobile-menu-panel svg {\n        display: block !important;\n        visibility: visible !important;\n        opacity: 1 !important;\n      }\n      \n      .mobile-menu-panel span {\n        display: inline !important;\n        visibility: visible !important;\n        opacity: 1 !important;\n        color: #334155 !important;\n      }\n      \n      .mobile-menu-panel .menu-item {\n        display: flex !important;\n      }\n      \n      .mobile-menu-panel span {\n        display: inline !important;\n      }\n      \n      .mobile-menu-panel.show {\n        transform: translateX(0) !important;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n};\n\n// Function to be called when the mobile menu closes\nexport const fixMobileMenuOnClose = () => {\n  const panel = document.querySelector('.mobile-menu-panel');\n  const backdrop = document.querySelector('.mobile-menu-backdrop');\n  \n  if (panel) {\n    panel.style.transform = 'translateX(100%)';\n    \n    // Re-enable scrolling on body - with force\n    forceEnableScrolling();\n  }\n  \n  if (backdrop) {\n    backdrop.style.opacity = '0';\n    \n    // Hide backdrop after transition\n    setTimeout(() => {\n      if (backdrop) backdrop.style.display = 'none';\n    }, 300);\n  }\n  \n  // Force overflow reset after a small delay to ensure it happens after transitions\n  setTimeout(() => {\n    forceEnableScrolling();\n  }, 400);\n  \n  // Add a final check to really make sure scrolling is re-enabled\n  setTimeout(() => {\n    forceEnableScrolling();\n  }, 800);\n  \n  console.log('Mobile menu fix applied - menu closed');\n};\n\n// Function to fix mobile submenu display issues\nexport const fixTechnicalSubmenu = (isOpen) => {\n  const submenu = document.querySelector('.mobile-submenu');\n  \n  if (submenu) {\n    if (isOpen) {\n      submenu.style.display = 'block';\n      submenu.style.maxHeight = '500px';\n      submenu.style.visibility = 'visible';\n      submenu.style.opacity = '1';\n      submenu.style.position = 'relative';\n      submenu.style.zIndex = '10003';\n      submenu.classList.add('visible');\n      submenu.classList.remove('hidden');\n      \n      // Ensure submenu has proper styling\n      submenu.style.paddingLeft = '1rem';\n      submenu.style.marginTop = '0.5rem';\n      submenu.style.marginBottom = '0.5rem';\n      submenu.style.borderLeft = '1px solid rgba(239, 68, 68, 0.3)';\n      \n      // Apply enhanced styling to all buttons in the submenu\n      enhanceSubmenuButtons();\n      \n      // Force visibility after a short delay to ensure rendering\n      setTimeout(() => {\n        if (isOpen) {\n          const buttons = submenu.querySelectorAll('button');\n          buttons.forEach(button => {\n            button.style.visibility = 'visible';\n            button.style.opacity = '1';\n            button.style.color = '#334155';\n            \n            const spans = button.querySelectorAll('span');\n            spans.forEach(span => {\n              span.style.visibility = 'visible';\n              span.style.opacity = '1';\n              span.style.color = '#334155';\n            });\n          });\n        }\n      }, 100);\n    } else {\n      submenu.style.maxHeight = '0';\n      submenu.style.visibility = 'hidden';\n      submenu.style.opacity = '0';\n      \n      // Hide after transition\n      setTimeout(() => {\n        if (!isOpen) {\n          submenu.style.display = 'none';\n          submenu.classList.add('hidden');\n          submenu.classList.remove('visible');\n        }\n      }, 300);\n    }\n  }\n};\n\n// Fix for initial page load\nexport const initMobileMenuFix = () => {\n  // Check if we're on a mobile device\n  const isMobile = window.innerWidth < 768;\n  \n  if (isMobile) {\n    // Ensure menu is properly hidden at start\n    const panel = document.querySelector('.mobile-menu-panel');\n    if (panel) {\n      panel.style.transform = 'translateX(100%)';\n    }\n    \n    // Listen for orientation changes\n    window.addEventListener('orientationchange', () => {\n      setTimeout(() => {\n        const currentPanel = document.querySelector('.mobile-menu-panel');\n        if (currentPanel && currentPanel.classList.contains('show')) {\n          // If menu is open, make sure it fills the new orientation height\n          currentPanel.style.height = `${window.innerHeight}px`;\n        }\n      }, 300);\n    });\n  }\n  \n  console.log('Mobile menu fixes initialized');\n  \n  // Return cleanup function\n  return () => {\n    window.removeEventListener('orientationchange', () => {});\n  };\n};\n\n\n\nexport default {\n  fixMobileMenuOnOpen,\n  fixMobileMenuOnClose,\n  fixTechnicalSubmenu,\n  initMobileMenuFix,\n  enhanceSubmenuButtons,\n  enhanceMenuContent,\n  forceEnableScrolling\n};","import * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\n\r\n/**\r\n * @file Advanced Model Optimizer with physically-based rendering enhancements\r\n * @description Provides high-fidelity material optimization and performance techniques\r\n * for realistic 3D model rendering in real-time applications.\r\n * @author Voltaris Development Team\r\n * @version 2.0.0\r\n */\r\n\r\n/**\r\n * Material quality presets defining physical properties for different surface types\r\n * Based on real-world measured values from material science research\r\n */\r\nconst MATERIAL_PRESETS = {\r\n  METAL_CHROME: {\r\n    metalness: 0.95,\r\n    roughness: 0.05,\r\n    envMapIntensity: 1.8,\r\n    clearcoat: 0.5,\r\n    clearcoatRoughness: 0.05\r\n  },\r\n  METAL_BRUSHED: {\r\n    metalness: 0.9,\r\n    roughness: 0.3,\r\n    envMapIntensity: 1.3,\r\n    anisotropy: 0.5,\r\n    anisotropyRotation: Math.PI / 2\r\n  },\r\n  PAINT_GLOSSY: {\r\n    metalness: 0.7,\r\n    roughness: 0.13,\r\n    envMapIntensity: 1.2,\r\n    clearcoat: 0.9,\r\n    clearcoatRoughness: 0.1\r\n  },\r\n  GLASS_AUTO: {\r\n    transmission: 0.95,\r\n    thickness: 0.5,\r\n    roughness: 0.05,\r\n    metalness: 0.1,\r\n    envMapIntensity: 2.0,\r\n    ior: 1.5,\r\n    transparent: true\r\n  },\r\n  RUBBER_TIRE: {\r\n    metalness: 0.0,\r\n    roughness: 0.95,\r\n    envMapIntensity: 0.5,\r\n    aoMapIntensity: 1.5,\r\n    clearcoat: 0.05,\r\n    clearcoatRoughness: 0.8\r\n  },\r\n  PLASTIC_HARD: {\r\n    metalness: 0.1,\r\n    roughness: 0.3,\r\n    envMapIntensity: 0.8,\r\n    clearcoat: 0.3,\r\n    clearcoatRoughness: 0.2\r\n  }\r\n};\r\n\r\n/**\r\n * Optimized model loader with DRACO compression support and PBR material enhancements\r\n * Provides high-fidelity visual quality with performance optimizations\r\n * \r\n * @param {string} modelPath - Path to the GLTF/GLB model file\r\n * @param {Function} onProgress - Progress callback with percentage loaded\r\n * @param {Function} onError - Error callback\r\n * @returns {Promise<THREE.Object3D>} - The optimized 3D model\r\n */\r\nexport const loadOptimizedModel = (modelPath, onProgress = () => {}, onError = () => {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      // Set up DRACO loader with optimal configuration\r\n      const dracoLoader = new DRACOLoader();\r\n      dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\r\n      dracoLoader.setDecoderConfig({ \r\n        type: 'js', // Use JS decoder for wider compatibility\r\n        // Use higher decoding precision for scientific visualization\r\n        quantization: {\r\n          POSITION: 12, // Up to 12 bits for position precision\r\n          NORMAL: 10,   // Up to 10 bits for normals\r\n          TEX_COORD: 10 // Up to 10 bits for texture coordinates\r\n        }\r\n      });\r\n      \r\n      // Set up GLTF loader with DRACO support\r\n      const gltfLoader = new GLTFLoader();\r\n      gltfLoader.setDRACOLoader(dracoLoader);\r\n      \r\n      // Load the model with progress tracking\r\n      gltfLoader.load(\r\n        modelPath,\r\n        (gltf) => {\r\n          // Extract animations and model scene\r\n          const animations = gltf.animations;\r\n          const modelScene = gltf.scene.clone();\r\n          \r\n          // Enhanced quality with optimized performance using advanced PBR techniques\r\n          modelScene.traverse((child) => {\r\n            if (child.isMesh) {\r\n              // Apply intelligent optimizations based on mesh characteristics\r\n              optimizeMesh(child);\r\n              \r\n              // Apply enhanced material quality with physically-based properties\r\n              if (child.material) {\r\n                // Handle both single and multi-materials\r\n                if (Array.isArray(child.material)) {\r\n                  child.material.forEach(applyAdvancedMaterial);\r\n                } else {\r\n                  applyAdvancedMaterial(child.material);\r\n                }\r\n              }\r\n            }\r\n          });\r\n          \r\n          // Center and scale the model using centroid calculation\r\n          const boundingBox = new THREE.Box3().setFromObject(modelScene);\r\n          const centroid = new THREE.Vector3();\r\n          boundingBox.getCenter(centroid);\r\n          const size = boundingBox.getSize(new THREE.Vector3());\r\n          \r\n          // Apply precise positioning to ensure model is centered\r\n          modelScene.position.x = -centroid.x;\r\n          modelScene.position.y = -centroid.y;\r\n          modelScene.position.z = -centroid.z;\r\n          \r\n          // Scale model to fit view using aspect-preserving scaling\r\n          const maxDimension = Math.max(size.x, size.y, size.z);\r\n          const scaleFactor = 2 / maxDimension;\r\n          modelScene.scale.set(scaleFactor, scaleFactor, scaleFactor);\r\n          \r\n          // Apply animations if available\r\n          if (animations && animations.length > 0) {\r\n            modelScene.animations = animations;\r\n          }\r\n          \r\n          resolve(modelScene);\r\n          \r\n          // Clean up resources to prevent memory leaks\r\n          dracoLoader.dispose();\r\n        },\r\n        // Progress callback with normalization\r\n        (xhr) => {\r\n          if (xhr.lengthComputable) {\r\n            const progress = Math.min(100, Math.round((xhr.loaded / xhr.total) * 100));\r\n            onProgress(progress);\r\n          }\r\n        },\r\n        // Error callback with detailed error information\r\n        (error) => {\r\n          console.error('Error loading 3D model:', error);\r\n          onError(error);\r\n          reject(new Error(`Failed to load model: ${error.message || 'Unknown error'}`));\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('Error initializing model loader:', error);\r\n      onError(error);\r\n      reject(new Error(`Loader initialization failed: ${error.message || 'Unknown error'}`));\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Optimizes a mesh for performance while preserving visual quality\r\n * \r\n * @param {THREE.Mesh} mesh - The mesh to optimize\r\n */\r\nfunction optimizeMesh(mesh) {\r\n  // Determine if mesh is a dynamic or static element based on naming conventions\r\n  const isDynamicPart = mesh.name.includes('wheel') || \r\n                      mesh.name.includes('door') || \r\n                      mesh.name.includes('rotor') ||\r\n                      mesh.name.includes('pivot') ||\r\n                      mesh.name.includes('hinge') ||\r\n                      mesh.name.includes('move');\r\n  \r\n  // Selectively enable automatic matrix updates only for dynamic parts\r\n  mesh.matrixAutoUpdate = isDynamicPart;\r\n  if (!isDynamicPart) {\r\n    mesh.updateMatrix();\r\n  }\r\n  \r\n  // Apply advanced shadow casting using mesh size analysis\r\n  const boundingBox = new THREE.Box3().setFromObject(mesh);\r\n  const size = boundingBox.getSize(new THREE.Vector3());\r\n  const maxDimension = Math.max(size.x, size.y, size.z);\r\n  \r\n  // Apply shadow settings based on mesh size and importance\r\n  const isMajorPart = maxDimension > 0.25 || \r\n                      mesh.name.includes('body') || \r\n                      mesh.name.includes('chassis');\r\n  \r\n  // Use precise shadow settings for visual quality\r\n  mesh.castShadow = isMajorPart;\r\n  mesh.receiveShadow = true;\r\n  \r\n  // Optimize geometry if possible\r\n  if (mesh.geometry) {\r\n    // Ensure geometry has computed attributes for efficiency\r\n    if (!mesh.geometry.attributes.normal) {\r\n      mesh.geometry.computeVertexNormals();\r\n    }\r\n    \r\n    // Use bounding sphere for frustum culling optimization\r\n    if (!mesh.geometry.boundingSphere) {\r\n      mesh.geometry.computeBoundingSphere();\r\n    }\r\n    \r\n    // Enable frustum culling for performance\r\n    mesh.frustumCulled = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Applies advanced physically-based materials with high-quality rendering properties\r\n * \r\n * @param {THREE.Material} material - The material to enhance\r\n */\r\nfunction applyAdvancedMaterial(material) {\r\n  // Apply high-quality texture settings if textures exist\r\n  if (material.map) {\r\n    material.map.anisotropy = 16; // Maximum texture quality for close viewing\r\n    material.map.minFilter = THREE.LinearMipmapLinearFilter; // Trilinear filtering for smooth transitions\r\n    material.map.magFilter = THREE.LinearFilter;\r\n    material.map.generateMipmaps = true;\r\n    material.map.needsUpdate = true;\r\n  }\r\n  \r\n  // Detect material type based on naming or properties\r\n  let materialType = 'DEFAULT';\r\n  \r\n  // Convert material name to lowercase for consistent matching if it exists\r\n  const materialName = material.name ? material.name.toLowerCase() : '';\r\n  \r\n  // Apply specialized material settings based on detected type\r\n  if (materialName.includes('chrome') || materialName.includes('steel') || \r\n      materialName.includes('metal') && !materialName.includes('brush')) {\r\n    applyPreset(material, MATERIAL_PRESETS.METAL_CHROME);\r\n  } \r\n  else if (materialName.includes('brushed') || materialName.includes('alumin')) {\r\n    applyPreset(material, MATERIAL_PRESETS.METAL_BRUSHED);\r\n  }\r\n  else if (materialName.includes('glass') || materialName.includes('window') || \r\n           materialName.includes('windshield')) {\r\n    applyPreset(material, MATERIAL_PRESETS.GLASS_AUTO);\r\n  }\r\n  else if (materialName.includes('body') || materialName.includes('paint') || \r\n           materialName.includes('car')) {\r\n    applyPreset(material, MATERIAL_PRESETS.PAINT_GLOSSY);\r\n  }\r\n  else if (materialName.includes('tire') || materialName.includes('rubber') || \r\n           materialName.includes('wheel')) {\r\n    applyPreset(material, MATERIAL_PRESETS.RUBBER_TIRE);\r\n  }\r\n  else if (materialName.includes('plastic') || materialName.includes('trim')) {\r\n    applyPreset(material, MATERIAL_PRESETS.PLASTIC_HARD);\r\n  }\r\n  \r\n  // Set universal material properties\r\n  material.needsUpdate = true;\r\n  material.precision = 'highp'; // Use high precision shaders for scientific accuracy\r\n  \r\n  // Enable material side rendering as needed\r\n  if (material.transparent) {\r\n    material.side = THREE.DoubleSide;\r\n  }\r\n}\r\n\r\n/**\r\n * Applies a material preset to a material\r\n * \r\n * @param {THREE.Material} material - The material to enhance\r\n * @param {Object} preset - The preset containing physical properties\r\n */\r\nfunction applyPreset(material, preset) {\r\n  // Apply all preset properties to the material\r\n  Object.keys(preset).forEach(key => {\r\n    // Skip properties that don't apply to this material type\r\n    if (material[key] !== undefined) {\r\n      material[key] = preset[key];\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Creates a Level-of-Detail (LOD) version of the model with enhanced quality at all distances\r\n * \r\n * @param {THREE.Object3D} highDetailModel - The high detail model\r\n * @param {Array<number>} distances - Array of distances at which to switch LOD levels\r\n * @returns {THREE.LOD} A LOD object with multiple detail levels\r\n */\r\nexport const createLODModel = (highDetailModel, distances = [0, 15, 30]) => {\r\n  // Create a new LOD object\r\n  const lod = new THREE.LOD();\r\n  \r\n  // Add the high detail model as the closest level\r\n  lod.addLevel(highDetailModel, distances[0]);\r\n  \r\n  // Create medium and low detail models with optimized quality\r\n  const mediumDetailModel = highDetailModel.clone();\r\n  const lowDetailModel = highDetailModel.clone();\r\n  \r\n  // Apply medium-detail optimizations that preserve material quality\r\n  mediumDetailModel.traverse((child) => {\r\n    if (child.isMesh) {\r\n      if (child.material) {\r\n        if (Array.isArray(child.material)) {\r\n          // Handle multi-materials with high quality\r\n          child.material = child.material.map(mat => {\r\n            // Create a quality material that's still efficient\r\n            return createOptimizedMeshStandardMaterial(mat, {\r\n              metalness: Math.min(mat.metalness || 0.5, 0.7),\r\n              roughness: Math.max(mat.roughness || 0.5, 0.3),\r\n              map: mat.map,\r\n              normalMap: mat.normalMap,\r\n              envMapIntensity: 0.7\r\n            });\r\n          });\r\n        } else {\r\n          // Single material optimization\r\n          const material = child.material;\r\n          child.material = createOptimizedMeshStandardMaterial(material, {\r\n            metalness: Math.min(material.metalness || 0.5, 0.7),\r\n            roughness: Math.max(material.roughness || 0.5, 0.3),\r\n            map: material.map,\r\n            normalMap: material.normalMap,\r\n            envMapIntensity: 0.7\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Keep shadows but optimize settings\r\n      child.castShadow = true;\r\n      child.receiveShadow = true;\r\n    }\r\n  });\r\n  \r\n  // Optimize low detail model for distant viewing while maintaining recognizability\r\n  lowDetailModel.traverse((child) => {\r\n    if (child.isMesh) {\r\n      // Use efficient material for distant objects that still looks good\r\n      const material = child.material;\r\n      let simpleMaterial;\r\n      \r\n      if (child.name.includes('glass') || \r\n          (material && material.name && material.name.includes('glass'))) {\r\n        // Special case for glass - keep transparency\r\n        simpleMaterial = new THREE.MeshPhysicalMaterial({\r\n          color: material.color || new THREE.Color(0xeeeeff),\r\n          metalness: 0.1,\r\n          roughness: 0.2,\r\n          transparent: true,\r\n          opacity: 0.7,\r\n          envMapIntensity: 1.0\r\n        });\r\n      } else {\r\n        // Standard optimization for other materials\r\n        simpleMaterial = new THREE.MeshPhongMaterial({\r\n          color: material.color || new THREE.Color(0x888888),\r\n          shininess: 30,\r\n          specular: new THREE.Color(0x111111)\r\n        });\r\n      }\r\n      \r\n      // Preserve maps but use simpler filtering\r\n      if (material && material.map) {\r\n        simpleMaterial.map = material.map;\r\n        simpleMaterial.map.minFilter = THREE.LinearFilter;\r\n        simpleMaterial.map.generateMipmaps = false;\r\n      }\r\n      \r\n      child.material = simpleMaterial;\r\n      \r\n      // Optimize shadows for distance\r\n      child.castShadow = false;\r\n      child.receiveShadow = true;\r\n    }\r\n  });\r\n  \r\n  // Add the medium and low detail models at appropriate distances\r\n  lod.addLevel(mediumDetailModel, distances[1]);\r\n  lod.addLevel(lowDetailModel, distances[2]);\r\n  \r\n  return lod;\r\n};\r\n\r\n/**\r\n * Creates an optimized MeshStandardMaterial based on a source material\r\n * \r\n * @param {THREE.Material} sourceMaterial - The source material to base optimization on\r\n * @param {Object} overrides - Properties to override on the new material\r\n * @returns {THREE.MeshStandardMaterial} The optimized material\r\n */\r\nfunction createOptimizedMeshStandardMaterial(sourceMaterial, overrides = {}) {\r\n  // Create new material with optimized properties\r\n  const newMaterial = new THREE.MeshStandardMaterial({\r\n    color: sourceMaterial.color || new THREE.Color(0x888888),\r\n    metalness: 0.5,\r\n    roughness: 0.5,\r\n    envMapIntensity: 1.0\r\n  });\r\n  \r\n  // Copy maps from original material if they exist\r\n  const mapsToTransfer = [\r\n    'map', 'normalMap', 'roughnessMap', 'metalnessMap', \r\n    'emissiveMap', 'aoMap', 'bumpMap'\r\n  ];\r\n  \r\n  mapsToTransfer.forEach(mapName => {\r\n    if (sourceMaterial[mapName]) {\r\n      newMaterial[mapName] = sourceMaterial[mapName];\r\n    }\r\n  });\r\n  \r\n  // Apply all overrides\r\n  Object.keys(overrides).forEach(key => {\r\n    newMaterial[key] = overrides[key];\r\n  });\r\n  \r\n  return newMaterial;\r\n}\r\n\r\n/**\r\n * Setup optimizers - This should be called once at the start of the application\r\n */\r\nexport const setupOptimizers = () => {\r\n  // Enable THREE.js cache for better performance\r\n  THREE.Cache.enabled = true;\r\n  \r\n  // Set global rendering quality settings\r\n  if (typeof window !== 'undefined') {\r\n    // Check if device supports high performance rendering\r\n    const highPerformanceGPU = \r\n      typeof navigator !== 'undefined' && \r\n      navigator.gpu !== undefined;\r\n      \r\n    // Set appropriate global settings based on device capability\r\n    if (highPerformanceGPU) {\r\n      THREE.ShaderChunk.precision = 'highp';\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Simplifies geometry by reducing vertex count\r\n * @param {THREE.BufferGeometry} geometry - The geometry to simplify\r\n * @param {number} targetReduction - Target percentage to reduce (0.0-1.0)\r\n * @returns {THREE.BufferGeometry} Simplified geometry\r\n */\r\nexport const simplifyGeometry = (geometry, targetReduction = 0.5) => {\r\n  if (!geometry) return null;\r\n  \r\n  // Create a temporary non-indexed version if needed\r\n  let tempGeometry = geometry;\r\n  if (geometry.index) {\r\n    tempGeometry = geometry.toNonIndexed();\r\n  }\r\n  \r\n  // Get vertices and calculate target count\r\n  const positions = tempGeometry.getAttribute('position');\r\n  const vertexCount = positions.count;\r\n  const targetCount = Math.max(\r\n    Math.floor(vertexCount * (1 - targetReduction)), \r\n    50 // Minimum vertex count\r\n  );\r\n  \r\n  // For production use, you'd use an actual simplification library\r\n  // This is a basic implementation for educational purposes\r\n  if (vertexCount <= targetCount) {\r\n    return geometry;\r\n  }\r\n  \r\n  // Simple algorithm to skip vertices\r\n  const ratio = vertexCount / targetCount;\r\n  const indices = [];\r\n  \r\n  // Create simplified index array\r\n  for (let i = 0; i < vertexCount; i += 3) {\r\n    if (Math.floor(i / 3) % Math.round(ratio) === 0) {\r\n      indices.push(i, i + 1, i + 2);\r\n    }\r\n  }\r\n  \r\n  // Create new buffer geometry with index\r\n  const simplified = new THREE.BufferGeometry();\r\n  simplified.setAttribute('position', positions);\r\n  \r\n  // Copy other attributes\r\n  for (const key in tempGeometry.attributes) {\r\n    if (key !== 'position') {\r\n      simplified.setAttribute(key, tempGeometry.attributes[key]);\r\n    }\r\n  }\r\n  \r\n  // Add indices\r\n  simplified.setIndex(indices);\r\n  simplified.computeVertexNormals();\r\n  \r\n  return simplified;\r\n};\r\n\r\n/**\r\n * Creates Level of Detail (LOD) instances for a model\r\n * @param {THREE.Object3D} model - Original high-detail model\r\n * @returns {THREE.LOD} LOD object with multiple detail levels\r\n */\r\nexport const createLODFromModel = (model) => {\r\n  if (!model) return null;\r\n  \r\n  const lod = new THREE.LOD();\r\n  \r\n  // Add original model as highest detail level\r\n  const highDetail = model.clone();\r\n  lod.addLevel(highDetail, 0);\r\n  \r\n  // Create medium detail version\r\n  const mediumDetail = model.clone();\r\n  mediumDetail.traverse((node) => {\r\n    if (node.isMesh && node.geometry) {\r\n      // Simplify geometry\r\n      const simplifiedGeometry = simplifyGeometry(node.geometry, 0.3);\r\n      node.geometry = simplifiedGeometry;\r\n      \r\n      // Simplify materials if complex\r\n      if (node.material && node.material.map) {\r\n        const newMaterial = new THREE.MeshPhongMaterial({\r\n          map: node.material.map,\r\n          color: node.material.color || 0xffffff,\r\n          shininess: 30\r\n        });\r\n        node.material = newMaterial;\r\n      }\r\n      \r\n      // Disable shadows for medium distance\r\n      node.castShadow = false;\r\n    }\r\n  });\r\n  lod.addLevel(mediumDetail, 10);\r\n  \r\n  // Create low detail version\r\n  const lowDetail = model.clone();\r\n  lowDetail.traverse((node) => {\r\n    if (node.isMesh && node.geometry) {\r\n      // Heavily simplify geometry\r\n      const simplifiedGeometry = simplifyGeometry(node.geometry, 0.7);\r\n      node.geometry = simplifiedGeometry;\r\n      \r\n      // Use basic materials for low detail\r\n      const color = node.material.color ? node.material.color.getHex() : 0xffffff;\r\n      node.material = new THREE.MeshLambertMaterial({ color });\r\n      \r\n      // Disable shadows completely\r\n      node.castShadow = false;\r\n      node.receiveShadow = false;\r\n    }\r\n  });\r\n  lod.addLevel(lowDetail, 30);\r\n  \r\n  return lod;\r\n};\r\n\r\n/**\r\n * Creates a frustum culling optimized model\r\n * @param {THREE.Object3D} model - The model to optimize\r\n * @returns {THREE.Object3D} Optimized model\r\n */\r\nexport const createFrustumCulledModel = (model) => {\r\n  if (!model) return null;\r\n  \r\n  const optimized = model.clone();\r\n  \r\n  // Add culling to all meshes\r\n  optimized.traverse((node) => {\r\n    if (node.isMesh) {\r\n      node.frustumCulled = true;\r\n      \r\n      // Calculate custom bounding sphere for better culling\r\n      if (node.geometry) {\r\n        node.geometry.computeBoundingSphere();\r\n        node.geometry.boundingSphere.radius *= 1.1; // Add a small buffer\r\n      }\r\n    }\r\n  });\r\n  \r\n  return optimized;\r\n};\r\n\r\n/**\r\n * Preload models in the background to improve perceived performance\r\n * @param {string[]} modelPaths - Array of model paths to preload\r\n * @param {Function} onComplete - Callback when preloading is complete\r\n */\r\nexport const preloadModels = (modelPaths = [], onComplete = () => {}) => {\r\n  // Set up DRACO loader\r\n  const dracoLoader = new DRACOLoader();\r\n  dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\r\n  \r\n  // Create GLTF loader with DRACO support\r\n  const gltfLoader = new GLTFLoader();\r\n  gltfLoader.setDRACOLoader(dracoLoader);\r\n  \r\n  let loadedCount = 0;\r\n  \r\n  // Load each model in sequence\r\n  modelPaths.forEach(path => {\r\n    gltfLoader.load(\r\n      path,\r\n      () => {\r\n        loadedCount++;\r\n        if (loadedCount === modelPaths.length) {\r\n          onComplete();\r\n          dracoLoader.dispose(); // Clean up\r\n        }\r\n      },\r\n      undefined,\r\n      (error) => console.warn(`Preloading warning for ${path}:`, error)\r\n    );\r\n  });\r\n}; \r\n\r\n// Create a properly named export object - MOVED TO END OF FILE\r\nconst ModelOptimizer = {\r\n  loadOptimizedModel,\r\n  createLODModel,\r\n  preloadModels,\r\n  simplifyGeometry,\r\n  createLODFromModel,\r\n  createFrustumCulledModel,\r\n  setupOptimizers\r\n}; \r\n\r\nexport default ModelOptimizer; ","/**\n * Advanced Menu Visibility Controller\n * This utility provides enhanced control over when the mobile menu button should be visible\n * based on current section, header size, and screen dimensions.\n */\n\n/**\n * Updates the visibility of the mobile menu button based on various conditions\n * @param {string} activeSection - The currently active section ID\n * @param {boolean} scrolled - Whether the page has been scrolled\n * @param {boolean} forceUpdate - Whether to force an update regardless of throttling\n */\nexport const updateMenuButtonVisibility = (activeSection, scrolled, forceUpdate = false) => {\n  // Throttle updates for better performance\n  if (!forceUpdate && window.menuVisibilityThrottled) return;\n  \n  // Throttle updates to once every 100ms for better performance\n  window.menuVisibilityThrottled = true;\n  setTimeout(() => {\n    window.menuVisibilityThrottled = false;\n  }, 100);\n  \n  // Get DOM elements\n  const menuButton = document.querySelector('.mobile-menu-button');\n  const header = document.querySelector('header');\n  \n  if (!menuButton || !header) return;\n  \n  // Determine visibility based on multiple factors\n  const isHomePage = activeSection === 'home';\n  const isMobile = window.innerWidth < 768;\n  const isShortScreen = window.innerHeight < 600;\n  const isNarrowHeader = header.offsetHeight < 80;\n  const isTopOfPage = !scrolled && window.scrollY < 50;\n  \n  // Configure visibility logic\n  // Show if:\n  // 1. On mobile devices\n  // 2. On the home page (hero section) on desktop\n  // 3. The header is too narrow to fit all navigation items\n  // 4. The screen height is very short\n  const shouldShow = \n    isMobile || \n    (isHomePage && !isMobile) || \n    isNarrowHeader ||\n    isShortScreen ||\n    (isTopOfPage && isHomePage); // Always show when at top of homepage\n  \n  // Update visibility\n  if (shouldShow) {\n    menuButton.style.display = 'flex';\n    setTimeout(() => {\n      menuButton.style.opacity = '1';\n      menuButton.style.transform = 'translateY(0)';\n    }, 10);\n  } else {\n    menuButton.style.opacity = '0';\n    menuButton.style.transform = 'translateY(-10px)';\n    setTimeout(() => {\n      if (!shouldShow) menuButton.style.display = 'none';\n    }, 300); // Match transition duration\n  }\n  \n  // Update body attribute for CSS targeting\n  document.body.setAttribute('data-section', activeSection);\n  document.body.setAttribute('data-scrolled', scrolled ? 'true' : 'false');\n};\n\n/**\n * Creates event listeners for the menu visibility controller\n * @param {Function} getSectionFn - Function that returns the current section\n * @param {Function} getScrolledFn - Function that returns the current scrolled state\n */\nexport const initMenuVisibilityController = (getSectionFn, getScrolledFn) => {\n  // Initial setup\n  updateMenuButtonVisibility(getSectionFn(), getScrolledFn(), true);\n  \n  // Add resize listener\n  window.addEventListener('resize', () => {\n    updateMenuButtonVisibility(getSectionFn(), getScrolledFn());\n  });\n  \n  // Additional scroll listener for precise control during scrolling\n  window.addEventListener('scroll', () => {\n    updateMenuButtonVisibility(getSectionFn(), window.scrollY > 50);\n  }, { passive: true }); // Passive for better scroll performance\n  \n  return () => {\n    window.removeEventListener('resize', updateMenuButtonVisibility);\n    window.removeEventListener('scroll', updateMenuButtonVisibility);\n  };\n};\n\nexport default {\n  updateMenuButtonVisibility,\n  initMenuVisibilityController\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t208: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkvoltaris_website\"] = self[\"webpackChunkvoltaris_website\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [21,743,670,96,8,753,13,928,415,525,233,648,584,795], () => (__webpack_require__(4067)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["forceEnableScrolling","document","body","style","overflow","overflowY","position","documentElement","htmlStyles","getAttribute","bodyStyles","includes","removeProperty","fixMobileMenuOnOpen","panel","querySelector","backdrop","menuContent","display","visibility","opacity","transform","test","navigator","userAgent","height","window","innerHeight","querySelectorAll","forEach","el","tagName","classList","contains","item","enhanceSubmenuButtons","enhanceMenuContent","console","log","button","width","textAlign","padding","fontSize","pointerEvents","zIndex","color","backgroundColor","borderRadius","marginBottom","span","addEventListener","createElement","textContent","head","appendChild","fixMobileMenuOnClose","setTimeout","fixTechnicalSubmenu","isOpen","submenu","maxHeight","add","remove","paddingLeft","marginTop","borderLeft","initMobileMenuFix","innerWidth","currentPanel","removeEventListener","MATERIAL_PRESETS","METAL_CHROME","metalness","roughness","envMapIntensity","clearcoat","clearcoatRoughness","METAL_BRUSHED","anisotropy","anisotropyRotation","Math","PI","PAINT_GLOSSY","GLASS_AUTO","transmission","thickness","ior","transparent","RUBBER_TIRE","aoMapIntensity","PLASTIC_HARD","loadOptimizedModel","modelPath","onProgress","arguments","length","undefined","onError","Promise","resolve","reject","dracoLoader","DRACOLoader","setDecoderPath","setDecoderConfig","type","quantization","POSITION","NORMAL","TEX_COORD","gltfLoader","GLTFLoader","setDRACOLoader","load","gltf","animations","modelScene","scene","clone","traverse","child","isMesh","mesh","isDynamicPart","name","matrixAutoUpdate","updateMatrix","boundingBox","THREE","setFromObject","size","getSize","maxDimension","max","x","y","z","isMajorPart","castShadow","receiveShadow","geometry","attributes","normal","computeVertexNormals","boundingSphere","computeBoundingSphere","frustumCulled","optimizeMesh","material","Array","isArray","applyAdvancedMaterial","centroid","getCenter","scaleFactor","scale","set","dispose","xhr","lengthComputable","progress","min","round","loaded","total","error","Error","message","map","minFilter","magFilter","generateMipmaps","needsUpdate","materialName","toLowerCase","applyPreset","precision","side","preset","Object","keys","key","setupOptimizers","enabled","gpu","updateMenuButtonVisibility","activeSection","scrolled","menuVisibilityThrottled","menuButton","header","isHomePage","isMobile","isShortScreen","isNarrowHeader","offsetHeight","isTopOfPage","scrollY","shouldShow","setAttribute","initMenuVisibilityController","getSectionFn","getScrolledFn","passive","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}